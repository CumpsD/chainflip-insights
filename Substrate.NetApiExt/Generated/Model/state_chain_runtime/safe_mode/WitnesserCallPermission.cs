//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.NetApiExt.Generated.Model.state_chain_runtime.safe_mode
{
    
    
    /// <summary>
    /// >> 52 - Composite[state_chain_runtime.safe_mode.WitnesserCallPermission]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class WitnesserCallPermission : BaseType
    {
        
        /// <summary>
        /// >> governance
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool Governance { get; set; }
        /// <summary>
        /// >> funding
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool Funding { get; set; }
        /// <summary>
        /// >> swapping
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool Swapping { get; set; }
        /// <summary>
        /// >> ethereum_broadcast
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool EthereumBroadcast { get; set; }
        /// <summary>
        /// >> ethereum_chain_tracking
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool EthereumChainTracking { get; set; }
        /// <summary>
        /// >> ethereum_ingress_egress
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool EthereumIngressEgress { get; set; }
        /// <summary>
        /// >> ethereum_vault
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool EthereumVault { get; set; }
        /// <summary>
        /// >> polkadot_broadcast
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool PolkadotBroadcast { get; set; }
        /// <summary>
        /// >> polkadot_chain_tracking
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool PolkadotChainTracking { get; set; }
        /// <summary>
        /// >> polkadot_ingress_egress
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool PolkadotIngressEgress { get; set; }
        /// <summary>
        /// >> polkadot_vault
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool PolkadotVault { get; set; }
        /// <summary>
        /// >> bitcoin_broadcast
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool BitcoinBroadcast { get; set; }
        /// <summary>
        /// >> bitcoin_chain_tracking
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool BitcoinChainTracking { get; set; }
        /// <summary>
        /// >> bitcoin_ingress_egress
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool BitcoinIngressEgress { get; set; }
        /// <summary>
        /// >> bitcoin_vault
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool BitcoinVault { get; set; }
        /// <summary>
        /// >> arbitrum_broadcast
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ArbitrumBroadcast { get; set; }
        /// <summary>
        /// >> arbitrum_chain_tracking
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ArbitrumChainTracking { get; set; }
        /// <summary>
        /// >> arbitrum_ingress_egress
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ArbitrumIngressEgress { get; set; }
        /// <summary>
        /// >> arbitrum_vault
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool ArbitrumVault { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "WitnesserCallPermission";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(Governance.Encode());
            result.AddRange(Funding.Encode());
            result.AddRange(Swapping.Encode());
            result.AddRange(EthereumBroadcast.Encode());
            result.AddRange(EthereumChainTracking.Encode());
            result.AddRange(EthereumIngressEgress.Encode());
            result.AddRange(EthereumVault.Encode());
            result.AddRange(PolkadotBroadcast.Encode());
            result.AddRange(PolkadotChainTracking.Encode());
            result.AddRange(PolkadotIngressEgress.Encode());
            result.AddRange(PolkadotVault.Encode());
            result.AddRange(BitcoinBroadcast.Encode());
            result.AddRange(BitcoinChainTracking.Encode());
            result.AddRange(BitcoinIngressEgress.Encode());
            result.AddRange(BitcoinVault.Encode());
            result.AddRange(ArbitrumBroadcast.Encode());
            result.AddRange(ArbitrumChainTracking.Encode());
            result.AddRange(ArbitrumIngressEgress.Encode());
            result.AddRange(ArbitrumVault.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            Governance = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Governance.Decode(byteArray, ref p);
            Funding = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Funding.Decode(byteArray, ref p);
            Swapping = new Substrate.NetApi.Model.Types.Primitive.Bool();
            Swapping.Decode(byteArray, ref p);
            EthereumBroadcast = new Substrate.NetApi.Model.Types.Primitive.Bool();
            EthereumBroadcast.Decode(byteArray, ref p);
            EthereumChainTracking = new Substrate.NetApi.Model.Types.Primitive.Bool();
            EthereumChainTracking.Decode(byteArray, ref p);
            EthereumIngressEgress = new Substrate.NetApi.Model.Types.Primitive.Bool();
            EthereumIngressEgress.Decode(byteArray, ref p);
            EthereumVault = new Substrate.NetApi.Model.Types.Primitive.Bool();
            EthereumVault.Decode(byteArray, ref p);
            PolkadotBroadcast = new Substrate.NetApi.Model.Types.Primitive.Bool();
            PolkadotBroadcast.Decode(byteArray, ref p);
            PolkadotChainTracking = new Substrate.NetApi.Model.Types.Primitive.Bool();
            PolkadotChainTracking.Decode(byteArray, ref p);
            PolkadotIngressEgress = new Substrate.NetApi.Model.Types.Primitive.Bool();
            PolkadotIngressEgress.Decode(byteArray, ref p);
            PolkadotVault = new Substrate.NetApi.Model.Types.Primitive.Bool();
            PolkadotVault.Decode(byteArray, ref p);
            BitcoinBroadcast = new Substrate.NetApi.Model.Types.Primitive.Bool();
            BitcoinBroadcast.Decode(byteArray, ref p);
            BitcoinChainTracking = new Substrate.NetApi.Model.Types.Primitive.Bool();
            BitcoinChainTracking.Decode(byteArray, ref p);
            BitcoinIngressEgress = new Substrate.NetApi.Model.Types.Primitive.Bool();
            BitcoinIngressEgress.Decode(byteArray, ref p);
            BitcoinVault = new Substrate.NetApi.Model.Types.Primitive.Bool();
            BitcoinVault.Decode(byteArray, ref p);
            ArbitrumBroadcast = new Substrate.NetApi.Model.Types.Primitive.Bool();
            ArbitrumBroadcast.Decode(byteArray, ref p);
            ArbitrumChainTracking = new Substrate.NetApi.Model.Types.Primitive.Bool();
            ArbitrumChainTracking.Decode(byteArray, ref p);
            ArbitrumIngressEgress = new Substrate.NetApi.Model.Types.Primitive.Bool();
            ArbitrumIngressEgress.Decode(byteArray, ref p);
            ArbitrumVault = new Substrate.NetApi.Model.Types.Primitive.Bool();
            ArbitrumVault.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
