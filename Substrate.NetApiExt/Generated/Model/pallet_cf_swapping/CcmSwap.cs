//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.NetApiExt.Generated.Model.pallet_cf_swapping
{
    
    
    /// <summary>
    /// >> 442 - Composite[pallet_cf_swapping.CcmSwap]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class CcmSwap : BaseType
    {
        
        /// <summary>
        /// >> source_asset
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset SourceAsset { get; set; }
        /// <summary>
        /// >> deposit_amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 DepositAmount { get; set; }
        /// <summary>
        /// >> destination_asset
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset DestinationAsset { get; set; }
        /// <summary>
        /// >> destination_address
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumForeignChainAddress DestinationAddress { get; set; }
        /// <summary>
        /// >> deposit_metadata
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_chains.CcmDepositMetadata DepositMetadata { get; set; }
        /// <summary>
        /// >> principal_swap_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64> PrincipalSwapId { get; set; }
        /// <summary>
        /// >> gas_swap_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64> GasSwapId { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "CcmSwap";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(SourceAsset.Encode());
            result.AddRange(DepositAmount.Encode());
            result.AddRange(DestinationAsset.Encode());
            result.AddRange(DestinationAddress.Encode());
            result.AddRange(DepositMetadata.Encode());
            result.AddRange(PrincipalSwapId.Encode());
            result.AddRange(GasSwapId.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            SourceAsset = new Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset();
            SourceAsset.Decode(byteArray, ref p);
            DepositAmount = new Substrate.NetApi.Model.Types.Primitive.U128();
            DepositAmount.Decode(byteArray, ref p);
            DestinationAsset = new Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset();
            DestinationAsset.Decode(byteArray, ref p);
            DestinationAddress = new Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumForeignChainAddress();
            DestinationAddress.Decode(byteArray, ref p);
            DepositMetadata = new Substrate.NetApiExt.Generated.Model.cf_chains.CcmDepositMetadata();
            DepositMetadata.Decode(byteArray, ref p);
            PrincipalSwapId = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64>();
            PrincipalSwapId.Decode(byteArray, ref p);
            GasSwapId = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U64>();
            GasSwapId.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
