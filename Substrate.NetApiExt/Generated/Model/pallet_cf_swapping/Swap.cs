//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Attributes;
using Substrate.NetApi.Model.Types.Base;
using Substrate.NetApi.Model.Types.Metadata.V14;
using System.Collections.Generic;


namespace Substrate.NetApiExt.Generated.Model.pallet_cf_swapping
{
    
    
    /// <summary>
    /// >> 504 - Composite[pallet_cf_swapping.Swap]
    /// </summary>
    [SubstrateNodeType(TypeDefEnum.Composite)]
    public sealed class Swap : BaseType
    {
        
        /// <summary>
        /// >> swap_id
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U64 SwapId { get; set; }
        /// <summary>
        /// >> from
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset From { get; set; }
        /// <summary>
        /// >> to
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset To { get; set; }
        /// <summary>
        /// >> amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 Amount { get; set; }
        /// <summary>
        /// >> swap_type
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_traits.liquidity.EnumSwapType SwapType { get; set; }
        /// <summary>
        /// >> stable_amount
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> StableAmount { get; set; }
        /// <summary>
        /// >> final_output
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128> FinalOutput { get; set; }
        /// <summary>
        /// >> fee_taken
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.Bool FeeTaken { get; set; }
        
        /// <inheritdoc/>
        public override string TypeName()
        {
            return "Swap";
        }
        
        /// <inheritdoc/>
        public override byte[] Encode()
        {
            var result = new List<byte>();
            result.AddRange(SwapId.Encode());
            result.AddRange(From.Encode());
            result.AddRange(To.Encode());
            result.AddRange(Amount.Encode());
            result.AddRange(SwapType.Encode());
            result.AddRange(StableAmount.Encode());
            result.AddRange(FinalOutput.Encode());
            result.AddRange(FeeTaken.Encode());
            return result.ToArray();
        }
        
        /// <inheritdoc/>
        public override void Decode(byte[] byteArray, ref int p)
        {
            var start = p;
            SwapId = new Substrate.NetApi.Model.Types.Primitive.U64();
            SwapId.Decode(byteArray, ref p);
            From = new Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset();
            From.Decode(byteArray, ref p);
            To = new Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset();
            To.Decode(byteArray, ref p);
            Amount = new Substrate.NetApi.Model.Types.Primitive.U128();
            Amount.Decode(byteArray, ref p);
            SwapType = new Substrate.NetApiExt.Generated.Model.cf_traits.liquidity.EnumSwapType();
            SwapType.Decode(byteArray, ref p);
            StableAmount = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            StableAmount.Decode(byteArray, ref p);
            FinalOutput = new Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApi.Model.Types.Primitive.U128>();
            FinalOutput.Decode(byteArray, ref p);
            FeeTaken = new Substrate.NetApi.Model.Types.Primitive.Bool();
            FeeTaken.Decode(byteArray, ref p);
            var bytesLength = p - start;
            TypeSize = bytesLength;
            Bytes = new byte[bytesLength];
            global::System.Array.Copy(byteArray, start, Bytes, 0, bytesLength);
        }
    }
}
