//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.NetApiExt.Generated.Model.pallet_cf_funding.pallet
{
    
    
    /// <summary>
    /// >> Error
    /// The `Error` enum of this pallet.
    /// </summary>
    public enum Error
    {
        
        /// <summary>
        /// >> NoPendingRedemption
        /// An invalid redemption has been witnessed: the account has no pending redemptions.
        /// </summary>
        NoPendingRedemption = 0,
        
        /// <summary>
        /// >> PendingRedemption
        /// The redeemer tried to redeem despite having a redemption already pending.
        /// </summary>
        PendingRedemption = 1,
        
        /// <summary>
        /// >> AlreadyNotBidding
        /// Can't stop bidding an account if it's already not bidding.
        /// </summary>
        AlreadyNotBidding = 2,
        
        /// <summary>
        /// >> AlreadyBidding
        /// Can only start bidding if not already bidding.
        /// </summary>
        AlreadyBidding = 3,
        
        /// <summary>
        /// >> AuctionPhase
        /// We are in the auction phase
        /// </summary>
        AuctionPhase = 4,
        
        /// <summary>
        /// >> BelowMinimumFunding
        /// When requesting a redemption, you must not have an amount below the minimum.
        /// </summary>
        BelowMinimumFunding = 5,
        
        /// <summary>
        /// >> InsufficientUnrestrictedFunds
        /// There are not enough unrestricted funds to process the redemption.
        /// </summary>
        InsufficientUnrestrictedFunds = 6,
        
        /// <summary>
        /// >> InvalidMinimumFundingUpdate
        /// Minimum funding amount must be greater than the redemption tax.
        /// </summary>
        InvalidMinimumFundingUpdate = 7,
        
        /// <summary>
        /// >> InvalidRedemptionTaxUpdate
        /// Redemption tax must be less than the minimum funding amount.
        /// </summary>
        InvalidRedemptionTaxUpdate = 8,
        
        /// <summary>
        /// >> InsufficientBalance
        /// The account has insufficient funds to pay for the redemption.
        /// </summary>
        InsufficientBalance = 9,
        
        /// <summary>
        /// >> AccountAlreadyBound
        /// The account is already bound to an address.
        /// </summary>
        AccountAlreadyBound = 10,
        
        /// <summary>
        /// >> AccountBindingRestrictionViolated
        /// The account is bound to a withdrawal address.
        /// </summary>
        AccountBindingRestrictionViolated = 11,
        
        /// <summary>
        /// >> RedeemDisabled
        /// Redeem is disabled due to Safe Mode.
        /// </summary>
        RedeemDisabled = 12,
        
        /// <summary>
        /// >> StartBiddingDisabled
        /// Start Bidding is disabled due to Safe Mode.
        /// </summary>
        StartBiddingDisabled = 13,
        
        /// <summary>
        /// >> StopBiddingDisabled
        /// Stop Bidding is disabled due to Safe Mode.
        /// </summary>
        StopBiddingDisabled = 14,
        
        /// <summary>
        /// >> ExecutorBindingRestrictionViolated
        /// The executor for this account is bound to another address.
        /// </summary>
        ExecutorBindingRestrictionViolated = 15,
        
        /// <summary>
        /// >> ExecutorAddressAlreadyBound
        /// The account is already bound to an executor address.
        /// </summary>
        ExecutorAddressAlreadyBound = 16,
    }
    
    /// <summary>
    /// >> 329 - Variant[pallet_cf_funding.pallet.Error]
    /// The `Error` enum of this pallet.
    /// </summary>
    public sealed class EnumError : BaseEnum<Error>
    {
    }
}
