//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EmissionsStorage
    /// </summary>
    public sealed class EmissionsStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EmissionsStorage Constructor
        /// </summary>
        public EmissionsStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "LastSupplyUpdateBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "CurrentAuthorityEmissionPerBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "BackupNodeEmissionPerBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "CurrentAuthorityEmissionInflation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "BackupNodeEmissionInflation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Emissions", "SupplyUpdateInterval"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> LastSupplyUpdateBlockParams
        ///  The block number at which we last updated supply to the Eth Chain.
        /// </summary>
        public static string LastSupplyUpdateBlockParams()
        {
            return RequestGenerator.GetStorage("Emissions", "LastSupplyUpdateBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastSupplyUpdateBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string LastSupplyUpdateBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastSupplyUpdateBlock
        ///  The block number at which we last updated supply to the Eth Chain.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastSupplyUpdateBlock(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.LastSupplyUpdateBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionPerBlockParams
        ///  The amount of Flip we mint to validators per block.
        /// </summary>
        public static string CurrentAuthorityEmissionPerBlockParams()
        {
            return RequestGenerator.GetStorage("Emissions", "CurrentAuthorityEmissionPerBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionPerBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentAuthorityEmissionPerBlockDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionPerBlock
        ///  The amount of Flip we mint to validators per block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> CurrentAuthorityEmissionPerBlock(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.CurrentAuthorityEmissionPerBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BackupNodeEmissionPerBlockParams
        ///  The amount of Flip we mint to backup nodes per block.
        /// </summary>
        public static string BackupNodeEmissionPerBlockParams()
        {
            return RequestGenerator.GetStorage("Emissions", "BackupNodeEmissionPerBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BackupNodeEmissionPerBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string BackupNodeEmissionPerBlockDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> BackupNodeEmissionPerBlock
        ///  The amount of Flip we mint to backup nodes per block.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> BackupNodeEmissionPerBlock(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.BackupNodeEmissionPerBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionInflationParams
        ///  Inflation per `COMPOUNDING_INTERVAL` set aside for current authorities in parts per billion.
        /// </summary>
        public static string CurrentAuthorityEmissionInflationParams()
        {
            return RequestGenerator.GetStorage("Emissions", "CurrentAuthorityEmissionInflation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionInflationDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentAuthorityEmissionInflationDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentAuthorityEmissionInflation
        ///  Inflation per `COMPOUNDING_INTERVAL` set aside for current authorities in parts per billion.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentAuthorityEmissionInflation(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.CurrentAuthorityEmissionInflationParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BackupNodeEmissionInflationParams
        ///  Inflation per `COMPOUNDING_INTERVAL` set aside for *backup* nodes, in parts per billion.
        /// </summary>
        public static string BackupNodeEmissionInflationParams()
        {
            return RequestGenerator.GetStorage("Emissions", "BackupNodeEmissionInflation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BackupNodeEmissionInflationDefault
        /// Default value as hex string
        /// </summary>
        public static string BackupNodeEmissionInflationDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BackupNodeEmissionInflation
        ///  Inflation per `COMPOUNDING_INTERVAL` set aside for *backup* nodes, in parts per billion.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BackupNodeEmissionInflation(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.BackupNodeEmissionInflationParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SupplyUpdateIntervalParams
        ///  Mint interval in blocks
        /// </summary>
        public static string SupplyUpdateIntervalParams()
        {
            return RequestGenerator.GetStorage("Emissions", "SupplyUpdateInterval", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SupplyUpdateIntervalDefault
        /// Default value as hex string
        /// </summary>
        public static string SupplyUpdateIntervalDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> SupplyUpdateInterval
        ///  Mint interval in blocks
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> SupplyUpdateInterval(string blockhash, CancellationToken token)
        {
            string parameters = EmissionsStorage.SupplyUpdateIntervalParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EmissionsCalls
    /// </summary>
    public sealed class EmissionsCalls
    {
        
        /// <summary>
        /// >> update_current_authority_emission_inflation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateCurrentAuthorityEmissionInflation(Substrate.NetApi.Model.Types.Primitive.U32 inflation)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(inflation.Encode());
            return new Method(4, "Emissions", 0, "update_current_authority_emission_inflation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_backup_node_emission_inflation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateBackupNodeEmissionInflation(Substrate.NetApi.Model.Types.Primitive.U32 inflation)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(inflation.Encode());
            return new Method(4, "Emissions", 1, "update_backup_node_emission_inflation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_supply_update_interval
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateSupplyUpdateInterval(Substrate.NetApi.Model.Types.Primitive.U32 value)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(value.Encode());
            return new Method(4, "Emissions", 2, "update_supply_update_interval", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EmissionsConstants
    /// </summary>
    public sealed class EmissionsConstants
    {
        
        /// <summary>
        /// >> CompoundingInterval
        ///  The number of blocks for the time frame we would test liveliness within
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CompoundingInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x96000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EmissionsErrors
    /// </summary>
    public enum EmissionsErrors
    {
        
        /// <summary>
        /// >> Overflow
        /// Emissions calculation resulted in overflow.
        /// </summary>
        Overflow,
        
        /// <summary>
        /// >> InvalidPercentage
        /// Invalid percentage
        /// </summary>
        InvalidPercentage,
        
        /// <summary>
        /// >> FlipBalanceBelowBurnThreshold
        /// The Flip balance was below the burn threshold.
        /// </summary>
        FlipBalanceBelowBurnThreshold,
    }
}
