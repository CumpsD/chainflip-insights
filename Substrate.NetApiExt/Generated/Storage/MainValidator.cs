//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ValidatorStorage
    /// </summary>
    public sealed class ValidatorStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ValidatorStorage Constructor
        /// </summary>
        public ValidatorStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "RedemptionPeriodAsPercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "CurrentEpochStartedAt"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "BlocksPerEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "CurrentEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "AuthorityIndex"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "CurrentRotationPhase"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_validator.EnumRotationPhase)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "CurrentAuthorities"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "VanityNames"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeMapT2)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "Bond"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "AccountPeerMapping"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public, Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "MappedPeers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "NodeCFEVersion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "LastExpiredEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "EpochExpiries"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "HistoricalAuthorities"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "HistoricalBonds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "HistoricalActiveEpochs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "Backups"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeMapT3)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "BackupRewardNodePercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "AuthoritySetMinSize"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "AuctionParameters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_validator.auction_resolver.SetSizeParameters)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "RegistrationBondPercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "AuctionBidCutoffPercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "MinimumReportedCfeVersion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Validator", "MaxAuthoritySetContractionPercentage"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent)));
        }
        
        /// <summary>
        /// >> RedemptionPeriodAsPercentageParams
        ///  Percentage of epoch we allow redemptions.
        /// </summary>
        public static string RedemptionPeriodAsPercentageParams()
        {
            return RequestGenerator.GetStorage("Validator", "RedemptionPeriodAsPercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RedemptionPeriodAsPercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string RedemptionPeriodAsPercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RedemptionPeriodAsPercentage
        ///  Percentage of epoch we allow redemptions.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> RedemptionPeriodAsPercentage(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.RedemptionPeriodAsPercentageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentEpochStartedAtParams
        ///  The starting block number for the current epoch.
        /// </summary>
        public static string CurrentEpochStartedAtParams()
        {
            return RequestGenerator.GetStorage("Validator", "CurrentEpochStartedAt", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentEpochStartedAtDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEpochStartedAtDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentEpochStartedAt
        ///  The starting block number for the current epoch.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEpochStartedAt(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.CurrentEpochStartedAtParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BlocksPerEpochParams
        ///  The duration of an epoch in blocks.
        /// </summary>
        public static string BlocksPerEpochParams()
        {
            return RequestGenerator.GetStorage("Validator", "BlocksPerEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BlocksPerEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string BlocksPerEpochDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> BlocksPerEpoch
        ///  The duration of an epoch in blocks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> BlocksPerEpoch(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.BlocksPerEpochParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentEpochParams
        ///  Current epoch index.
        /// </summary>
        public static string CurrentEpochParams()
        {
            return RequestGenerator.GetStorage("Validator", "CurrentEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentEpochDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> CurrentEpoch
        ///  Current epoch index.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentEpoch(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.CurrentEpochParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AuthorityIndexParams
        ///  Defines a unique index for each authority for each epoch.
        /// </summary>
        public static string AuthorityIndexParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key)
        {
            return RequestGenerator.GetStorage("Validator", "AuthorityIndex", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, key.Value);
        }
        
        /// <summary>
        /// >> AuthorityIndexDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthorityIndexDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AuthorityIndex
        ///  Defines a unique index for each authority for each epoch.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AuthorityIndex(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32> key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.AuthorityIndexParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentRotationPhaseParams
        ///  The rotation phase we are currently at.
        /// </summary>
        public static string CurrentRotationPhaseParams()
        {
            return RequestGenerator.GetStorage("Validator", "CurrentRotationPhase", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentRotationPhaseDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentRotationPhaseDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrentRotationPhase
        ///  The rotation phase we are currently at.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_validator.EnumRotationPhase> CurrentRotationPhase(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.CurrentRotationPhaseParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_validator.EnumRotationPhase>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentAuthoritiesParams
        ///  A set of the current authorities.
        /// </summary>
        public static string CurrentAuthoritiesParams()
        {
            return RequestGenerator.GetStorage("Validator", "CurrentAuthorities", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentAuthoritiesDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentAuthoritiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrentAuthorities
        ///  A set of the current authorities.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1> CurrentAuthorities(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.CurrentAuthoritiesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VanityNamesParams
        ///  Vanity names of the validators stored as a Map with the current validator IDs as key.
        /// </summary>
        public static string VanityNamesParams()
        {
            return RequestGenerator.GetStorage("Validator", "VanityNames", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> VanityNamesDefault
        /// Default value as hex string
        /// </summary>
        public static string VanityNamesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VanityNames
        ///  Vanity names of the validators stored as a Map with the current validator IDs as key.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT2> VanityNames(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.VanityNamesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT2>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BondParams
        ///  The bond of the current epoch.
        /// </summary>
        public static string BondParams()
        {
            return RequestGenerator.GetStorage("Validator", "Bond", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BondDefault
        /// Default value as hex string
        /// </summary>
        public static string BondDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> Bond
        ///  The bond of the current epoch.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> Bond(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.BondParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AccountPeerMappingParams
        ///  Account to Peer Mapping.
        /// </summary>
        public static string AccountPeerMappingParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Validator", "AccountPeerMapping", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountPeerMappingDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountPeerMappingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountPeerMapping
        ///  Account to Peer Mapping.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public, Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>> AccountPeerMapping(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.AccountPeerMappingParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public, Substrate.NetApi.Model.Types.Primitive.U16, Substrate.NetApi.Model.Types.Primitive.U128>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MappedPeersParams
        ///  Ed25519 public keys (aka peer ids) that are associated with account ids. (We keep track
        ///  of them to ensure they don't somehow get reused between different account ids.)
        /// </summary>
        public static string MappedPeersParams(Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public key)
        {
            return RequestGenerator.GetStorage("Validator", "MappedPeers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MappedPeersDefault
        /// Default value as hex string
        /// </summary>
        public static string MappedPeersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MappedPeers
        ///  Ed25519 public keys (aka peer ids) that are associated with account ids. (We keep track
        ///  of them to ensure they don't somehow get reused between different account ids.)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> MappedPeers(Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.MappedPeersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> NodeCFEVersionParams
        ///  Node CFE version.
        /// </summary>
        public static string NodeCFEVersionParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Validator", "NodeCFEVersion", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> NodeCFEVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string NodeCFEVersionDefault()
        {
            return "0x000000";
        }
        
        /// <summary>
        /// >> NodeCFEVersion
        ///  Node CFE version.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer> NodeCFEVersion(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.NodeCFEVersionParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastExpiredEpochParams
        ///  The last expired epoch index.
        /// </summary>
        public static string LastExpiredEpochParams()
        {
            return RequestGenerator.GetStorage("Validator", "LastExpiredEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> LastExpiredEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string LastExpiredEpochDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> LastExpiredEpoch
        ///  The last expired epoch index.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastExpiredEpoch(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.LastExpiredEpochParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EpochExpiriesParams
        ///  A map storing the expiry block numbers for old epochs.
        /// </summary>
        public static string EpochExpiriesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Validator", "EpochExpiries", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> EpochExpiriesDefault
        /// Default value as hex string
        /// </summary>
        public static string EpochExpiriesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EpochExpiries
        ///  A map storing the expiry block numbers for old epochs.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> EpochExpiries(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.EpochExpiriesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HistoricalAuthoritiesParams
        ///  A map between an epoch and the set of authorities (participating in this epoch).
        /// </summary>
        public static string HistoricalAuthoritiesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Validator", "HistoricalAuthorities", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HistoricalAuthoritiesDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoricalAuthoritiesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HistoricalAuthorities
        ///  A map between an epoch and the set of authorities (participating in this epoch).
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1> HistoricalAuthorities(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.HistoricalAuthoritiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HistoricalBondsParams
        ///  A map between an epoch and the bonded balance (MAB)
        /// </summary>
        public static string HistoricalBondsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Validator", "HistoricalBonds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HistoricalBondsDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoricalBondsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> HistoricalBonds
        ///  A map between an epoch and the bonded balance (MAB)
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> HistoricalBonds(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.HistoricalBondsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HistoricalActiveEpochsParams
        ///  A map between an authority and a set of all the active epochs a node was an authority in
        /// </summary>
        public static string HistoricalActiveEpochsParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Validator", "HistoricalActiveEpochs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> HistoricalActiveEpochsDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoricalActiveEpochsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> HistoricalActiveEpochs
        ///  A map between an authority and a set of all the active epochs a node was an authority in
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>> HistoricalActiveEpochs(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.HistoricalActiveEpochsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BackupsParams
        ///  Backups, validator nodes who are not in the authority set.
        /// </summary>
        public static string BackupsParams()
        {
            return RequestGenerator.GetStorage("Validator", "Backups", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BackupsDefault
        /// Default value as hex string
        /// </summary>
        public static string BackupsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Backups
        ///  Backups, validator nodes who are not in the authority set.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT3> Backups(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.BackupsParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT3>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BackupRewardNodePercentageParams
        ///  Determines the number of backup nodes who receive rewards as a percentage
        ///  of the authority count.
        /// </summary>
        public static string BackupRewardNodePercentageParams()
        {
            return RequestGenerator.GetStorage("Validator", "BackupRewardNodePercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BackupRewardNodePercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string BackupRewardNodePercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BackupRewardNodePercentage
        ///  Determines the number of backup nodes who receive rewards as a percentage
        ///  of the authority count.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> BackupRewardNodePercentage(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.BackupRewardNodePercentageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AuthoritySetMinSizeParams
        ///  The absolute minimum number of authority nodes for the next epoch.
        /// </summary>
        public static string AuthoritySetMinSizeParams()
        {
            return RequestGenerator.GetStorage("Validator", "AuthoritySetMinSize", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuthoritySetMinSizeDefault
        /// Default value as hex string
        /// </summary>
        public static string AuthoritySetMinSizeDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> AuthoritySetMinSize
        ///  The absolute minimum number of authority nodes for the next epoch.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> AuthoritySetMinSize(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.AuthoritySetMinSizeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AuctionParametersParams
        ///  Auction parameters.
        /// </summary>
        public static string AuctionParametersParams()
        {
            return RequestGenerator.GetStorage("Validator", "AuctionParameters", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuctionParametersDefault
        /// Default value as hex string
        /// </summary>
        public static string AuctionParametersDefault()
        {
            return "0x000000000000000000000000";
        }
        
        /// <summary>
        /// >> AuctionParameters
        ///  Auction parameters.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_validator.auction_resolver.SetSizeParameters> AuctionParameters(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.AuctionParametersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_validator.auction_resolver.SetSizeParameters>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RegistrationBondPercentageParams
        ///  An account's balance must be at least this percentage of the current bond in order to
        ///  register as a validator.
        /// </summary>
        public static string RegistrationBondPercentageParams()
        {
            return RequestGenerator.GetStorage("Validator", "RegistrationBondPercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RegistrationBondPercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string RegistrationBondPercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RegistrationBondPercentage
        ///  An account's balance must be at least this percentage of the current bond in order to
        ///  register as a validator.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> RegistrationBondPercentage(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.RegistrationBondPercentageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> AuctionBidCutoffPercentageParams
        ///  Auction losers whose bids are below this percentage of the MAB will not be excluded from
        ///  participating in Keygen.
        /// </summary>
        public static string AuctionBidCutoffPercentageParams()
        {
            return RequestGenerator.GetStorage("Validator", "AuctionBidCutoffPercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AuctionBidCutoffPercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string AuctionBidCutoffPercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AuctionBidCutoffPercentage
        ///  Auction losers whose bids are below this percentage of the MAB will not be excluded from
        ///  participating in Keygen.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> AuctionBidCutoffPercentage(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.AuctionBidCutoffPercentageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MinimumReportedCfeVersionParams
        ///  Determines the minimum version that each CFE must report to be considered qualified
        ///  for Keygen.
        /// </summary>
        public static string MinimumReportedCfeVersionParams()
        {
            return RequestGenerator.GetStorage("Validator", "MinimumReportedCfeVersion", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MinimumReportedCfeVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string MinimumReportedCfeVersionDefault()
        {
            return "0x000000";
        }
        
        /// <summary>
        /// >> MinimumReportedCfeVersion
        ///  Determines the minimum version that each CFE must report to be considered qualified
        ///  for Keygen.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer> MinimumReportedCfeVersion(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.MinimumReportedCfeVersionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MaxAuthoritySetContractionPercentageParams
        ///  Determines the maximum allowed reduction of authority set size in percents between two
        ///  consecutive epochs.
        /// </summary>
        public static string MaxAuthoritySetContractionPercentageParams()
        {
            return RequestGenerator.GetStorage("Validator", "MaxAuthoritySetContractionPercentage", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> MaxAuthoritySetContractionPercentageDefault
        /// Default value as hex string
        /// </summary>
        public static string MaxAuthoritySetContractionPercentageDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaxAuthoritySetContractionPercentage
        ///  Determines the maximum allowed reduction of authority set size in percents between two
        ///  consecutive epochs.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent> MaxAuthoritySetContractionPercentage(string blockhash, CancellationToken token)
        {
            string parameters = ValidatorStorage.MaxAuthoritySetContractionPercentageParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.per_things.Percent>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ValidatorCalls
    /// </summary>
    public sealed class ValidatorCalls
    {
        
        /// <summary>
        /// >> update_pallet_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdatePalletConfig(Substrate.NetApiExt.Generated.Model.pallet_cf_validator.EnumPalletConfigUpdate update)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(update.Encode());
            return new Method(9, "Validator", 0, "update_pallet_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_rotation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceRotation()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(9, "Validator", 1, "force_rotation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_keys
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetKeys(Substrate.NetApiExt.Generated.Model.state_chain_runtime.opaque.SessionKeys keys, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> proof)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(keys.Encode());
            byteArray.AddRange(proof.Encode());
            return new Method(9, "Validator", 2, "set_keys", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_peer_id
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterPeerId(Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Public peer_id, Substrate.NetApi.Model.Types.Primitive.U16 port, Substrate.NetApi.Model.Types.Primitive.U128 ip_address, Substrate.NetApiExt.Generated.Model.sp_core.ed25519.Signature signature)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(peer_id.Encode());
            byteArray.AddRange(port.Encode());
            byteArray.AddRange(ip_address.Encode());
            byteArray.AddRange(signature.Encode());
            return new Method(9, "Validator", 3, "register_peer_id", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cfe_version
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CfeVersion(Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer new_version)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_version.Encode());
            return new Method(9, "Validator", 4, "cfe_version", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_vanity_name
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVanityName(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(9, "Validator", 5, "set_vanity_name", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_as_validator
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterAsValidator()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(9, "Validator", 6, "register_as_validator", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ValidatorConstants
    /// </summary>
    public sealed class ValidatorConstants
    {
    }
    
    /// <summary>
    /// >> ValidatorErrors
    /// </summary>
    public enum ValidatorErrors
    {
        
        /// <summary>
        /// >> InvalidEpochDuration
        /// Epoch duration supplied is invalid.
        /// </summary>
        InvalidEpochDuration,
        
        /// <summary>
        /// >> RotationInProgress
        /// A rotation is in progress.
        /// </summary>
        RotationInProgress,
        
        /// <summary>
        /// >> AccountPeerMappingOverlap
        /// Validator Peer mapping overlaps with an existing mapping.
        /// </summary>
        AccountPeerMappingOverlap,
        
        /// <summary>
        /// >> InvalidAccountPeerMappingSignature
        /// Invalid signature.
        /// </summary>
        InvalidAccountPeerMappingSignature,
        
        /// <summary>
        /// >> InvalidRedemptionPeriod
        /// Invalid redemption period.
        /// </summary>
        InvalidRedemptionPeriod,
        
        /// <summary>
        /// >> NameTooLong
        /// Vanity name length exceeds the limit of 64 characters.
        /// </summary>
        NameTooLong,
        
        /// <summary>
        /// >> InvalidCharactersInName
        /// Invalid characters in the name.
        /// </summary>
        InvalidCharactersInName,
        
        /// <summary>
        /// >> InvalidAuthoritySetMinSize
        /// Invalid minimum authority set size.
        /// </summary>
        InvalidAuthoritySetMinSize,
        
        /// <summary>
        /// >> InvalidAuctionParameters
        /// Auction parameters are invalid.
        /// </summary>
        InvalidAuctionParameters,
        
        /// <summary>
        /// >> InconsistentRanges
        /// The dynamic set size ranges are inconsistent.
        /// </summary>
        InconsistentRanges,
        
        /// <summary>
        /// >> NotEnoughBidders
        /// Not enough bidders were available to resolve the auction.
        /// </summary>
        NotEnoughBidders,
        
        /// <summary>
        /// >> NotEnoughFunds
        /// Not enough funds to register as a validator.
        /// </summary>
        NotEnoughFunds,
        
        /// <summary>
        /// >> RotationsDisabled
        /// Rotations are currently disabled through SafeMode.
        /// </summary>
        RotationsDisabled,
    }
}
