//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EvmThresholdSignerStorage
    /// </summary>
    public sealed class EvmThresholdSignerStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EvmThresholdSignerStorage Constructor
        /// </summary>
        public EvmThresholdSignerStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "ThresholdSignatureRequestIdCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "PendingCeremonies"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.CeremonyContextT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "PendingRequestInstructions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.RequestInstructionT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "RequestCallback"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "Signature"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Model.cf_traits.async_result.EnumAsyncResult)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "CeremonyRetryQueues"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "RequestRetryQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "ThresholdSignatureResponseTimeout"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "CurrentKeyEpoch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "Keys"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "PendingKeyRotation"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.EnumKeyRotationStatus)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeygenSuccessVoters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeygenFailureVoters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeyHandoverSuccessVoters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeyHandoverFailureVoters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeygenResolutionPendingSince"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeyHandoverResolutionPendingSince"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeygenResponseTimeout"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "KeygenSlashAmount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EvmThresholdSigner", "CeremonyIdCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
        }
        
        /// <summary>
        /// >> ThresholdSignatureRequestIdCounterParams
        ///  A counter to generate fresh request ids.
        /// </summary>
        public static string ThresholdSignatureRequestIdCounterParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "ThresholdSignatureRequestIdCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ThresholdSignatureRequestIdCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string ThresholdSignatureRequestIdCounterDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> ThresholdSignatureRequestIdCounter
        ///  A counter to generate fresh request ids.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ThresholdSignatureRequestIdCounter(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.ThresholdSignatureRequestIdCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingCeremoniesParams
        ///  Stores the context required for processing live ceremonies.
        /// </summary>
        public static string PendingCeremoniesParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "PendingCeremonies", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingCeremoniesDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingCeremoniesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingCeremonies
        ///  Stores the context required for processing live ceremonies.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.CeremonyContextT1> PendingCeremonies(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.PendingCeremoniesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.CeremonyContextT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingRequestInstructionsParams
        /// </summary>
        public static string PendingRequestInstructionsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "PendingRequestInstructions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingRequestInstructionsDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingRequestInstructionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingRequestInstructions
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.RequestInstructionT1> PendingRequestInstructions(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.PendingRequestInstructionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.pallet.RequestInstructionT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RequestCallbackParams
        ///  Callbacks to be dispatched when a request is fulfilled.
        /// </summary>
        public static string RequestCallbackParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "RequestCallback", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RequestCallbackDefault
        /// Default value as hex string
        /// </summary>
        public static string RequestCallbackDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RequestCallback
        ///  Callbacks to be dispatched when a request is fulfilled.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall> RequestCallback(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.RequestCallbackParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SignatureParams
        ///  State of the threshold signature requested.
        /// </summary>
        public static string SignatureParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "Signature", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SignatureDefault
        /// Default value as hex string
        /// </summary>
        public static string SignatureDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> Signature
        ///  State of the threshold signature requested.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_traits.async_result.EnumAsyncResult> Signature(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.SignatureParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_traits.async_result.EnumAsyncResult>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CeremonyRetryQueuesParams
        ///  A map containing lists of ceremony ids that should be retried at the block stored in the
        ///  key.
        /// </summary>
        public static string CeremonyRetryQueuesParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "CeremonyRetryQueues", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CeremonyRetryQueuesDefault
        /// Default value as hex string
        /// </summary>
        public static string CeremonyRetryQueuesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CeremonyRetryQueues
        ///  A map containing lists of ceremony ids that should be retried at the block stored in the
        ///  key.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64>> CeremonyRetryQueues(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.CeremonyRetryQueuesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U64>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RequestRetryQueueParams
        /// </summary>
        public static string RequestRetryQueueParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "RequestRetryQueue", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> RequestRetryQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string RequestRetryQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> RequestRetryQueue
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>> RequestRetryQueue(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.RequestRetryQueueParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ThresholdSignatureResponseTimeoutParams
        ///  Maximum duration of a threshold signing ceremony before it is timed out and retried
        /// </summary>
        public static string ThresholdSignatureResponseTimeoutParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "ThresholdSignatureResponseTimeout", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ThresholdSignatureResponseTimeoutDefault
        /// Default value as hex string
        /// </summary>
        public static string ThresholdSignatureResponseTimeoutDefault()
        {
            return "0x0A000000";
        }
        
        /// <summary>
        /// >> ThresholdSignatureResponseTimeout
        ///  Maximum duration of a threshold signing ceremony before it is timed out and retried
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> ThresholdSignatureResponseTimeout(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.ThresholdSignatureResponseTimeoutParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentKeyEpochParams
        ///  The epoch whose authorities control the current key.
        /// </summary>
        public static string CurrentKeyEpochParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "CurrentKeyEpoch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentKeyEpochDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentKeyEpochDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrentKeyEpoch
        ///  The epoch whose authorities control the current key.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> CurrentKeyEpoch(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.CurrentKeyEpochParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeysParams
        ///  The map of all keys by epoch.
        /// </summary>
        public static string KeysParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "Keys", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> KeysDefault
        /// Default value as hex string
        /// </summary>
        public static string KeysDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Keys
        ///  The map of all keys by epoch.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey> Keys(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeysParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingKeyRotationParams
        ///  Key rotation statuses for the current epoch rotation.
        /// </summary>
        public static string PendingKeyRotationParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "PendingKeyRotation", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PendingKeyRotationDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingKeyRotationDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingKeyRotation
        ///  Key rotation statuses for the current epoch rotation.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.EnumKeyRotationStatus> PendingKeyRotation(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.PendingKeyRotationParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_threshold_signature.EnumKeyRotationStatus>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeygenSuccessVotersParams
        ///  The voters who voted for success for a particular agg key rotation
        /// </summary>
        public static string KeygenSuccessVotersParams(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeygenSuccessVoters", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> KeygenSuccessVotersDefault
        /// Default value as hex string
        /// </summary>
        public static string KeygenSuccessVotersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> KeygenSuccessVoters
        ///  The voters who voted for success for a particular agg key rotation
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> KeygenSuccessVoters(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeygenSuccessVotersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeygenFailureVotersParams
        ///  The voters who voted for failure for a particular agg key rotation
        /// </summary>
        public static string KeygenFailureVotersParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeygenFailureVoters", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeygenFailureVotersDefault
        /// Default value as hex string
        /// </summary>
        public static string KeygenFailureVotersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> KeygenFailureVoters
        ///  The voters who voted for failure for a particular agg key rotation
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> KeygenFailureVoters(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeygenFailureVotersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeyHandoverSuccessVotersParams
        ///  The voters who voted for success for a particular key handover ceremony
        /// </summary>
        public static string KeyHandoverSuccessVotersParams(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey key)
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeyHandoverSuccessVoters", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> KeyHandoverSuccessVotersDefault
        /// Default value as hex string
        /// </summary>
        public static string KeyHandoverSuccessVotersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> KeyHandoverSuccessVoters
        ///  The voters who voted for success for a particular key handover ceremony
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> KeyHandoverSuccessVoters(Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey key, string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeyHandoverSuccessVotersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeyHandoverFailureVotersParams
        ///  The voters who voted for failure for a particular key handover ceremony
        /// </summary>
        public static string KeyHandoverFailureVotersParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeyHandoverFailureVoters", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeyHandoverFailureVotersDefault
        /// Default value as hex string
        /// </summary>
        public static string KeyHandoverFailureVotersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> KeyHandoverFailureVoters
        ///  The voters who voted for failure for a particular key handover ceremony
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>> KeyHandoverFailureVoters(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeyHandoverFailureVotersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeygenResolutionPendingSinceParams
        ///  The block since which we have been waiting for keygen to be resolved.
        /// </summary>
        public static string KeygenResolutionPendingSinceParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeygenResolutionPendingSince", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeygenResolutionPendingSinceDefault
        /// Default value as hex string
        /// </summary>
        public static string KeygenResolutionPendingSinceDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> KeygenResolutionPendingSince
        ///  The block since which we have been waiting for keygen to be resolved.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> KeygenResolutionPendingSince(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeygenResolutionPendingSinceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeyHandoverResolutionPendingSinceParams
        ///  The block since which we have been waiting for key handover to be resolved.
        /// </summary>
        public static string KeyHandoverResolutionPendingSinceParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeyHandoverResolutionPendingSince", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeyHandoverResolutionPendingSinceDefault
        /// Default value as hex string
        /// </summary>
        public static string KeyHandoverResolutionPendingSinceDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> KeyHandoverResolutionPendingSince
        ///  The block since which we have been waiting for key handover to be resolved.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> KeyHandoverResolutionPendingSince(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeyHandoverResolutionPendingSinceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeygenResponseTimeoutParams
        /// </summary>
        public static string KeygenResponseTimeoutParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeygenResponseTimeout", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeygenResponseTimeoutDefault
        /// Default value as hex string
        /// </summary>
        public static string KeygenResponseTimeoutDefault()
        {
            return "0x5A000000";
        }
        
        /// <summary>
        /// >> KeygenResponseTimeout
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> KeygenResponseTimeout(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeygenResponseTimeoutParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> KeygenSlashAmountParams
        ///  The amount of FLIP that is slashed for an agreed reported party expressed in Flipperinos
        ///  (2/3 must agree the node was an offender) on keygen failure.
        /// </summary>
        public static string KeygenSlashAmountParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "KeygenSlashAmount", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> KeygenSlashAmountDefault
        /// Default value as hex string
        /// </summary>
        public static string KeygenSlashAmountDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> KeygenSlashAmount
        ///  The amount of FLIP that is slashed for an agreed reported party expressed in Flipperinos
        ///  (2/3 must agree the node was an offender) on keygen failure.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> KeygenSlashAmount(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.KeygenSlashAmountParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CeremonyIdCounterParams
        ///  Counter for generating unique ceremony ids.
        /// </summary>
        public static string CeremonyIdCounterParams()
        {
            return RequestGenerator.GetStorage("EvmThresholdSigner", "CeremonyIdCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CeremonyIdCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string CeremonyIdCounterDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> CeremonyIdCounter
        ///  Counter for generating unique ceremony ids.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> CeremonyIdCounter(string blockhash, CancellationToken token)
        {
            string parameters = EvmThresholdSignerStorage.CeremonyIdCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EvmThresholdSignerCalls
    /// </summary>
    public sealed class EvmThresholdSignerCalls
    {
        
        /// <summary>
        /// >> signature_success
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SignatureSuccess(Substrate.NetApi.Model.Types.Primitive.U64 ceremony_id, Substrate.NetApiExt.Generated.Model.cf_chains.evm.SchnorrVerificationComponents signature)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ceremony_id.Encode());
            byteArray.AddRange(signature.Encode());
            return new Method(24, "EvmThresholdSigner", 0, "signature_success", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report_signature_failed
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportSignatureFailed(Substrate.NetApi.Model.Types.Primitive.U64 ceremony_id, Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1 offenders)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ceremony_id.Encode());
            byteArray.AddRange(offenders.Encode());
            return new Method(24, "EvmThresholdSigner", 1, "report_signature_failed", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_threshold_signature_timeout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetThresholdSignatureTimeout(Substrate.NetApi.Model.Types.Primitive.U32 new_timeout)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_timeout.Encode());
            return new Method(24, "EvmThresholdSigner", 2, "set_threshold_signature_timeout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report_keygen_outcome
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportKeygenOutcome(Substrate.NetApi.Model.Types.Primitive.U64 ceremony_id, Substrate.NetApiExt.Generated.Types.Base.EnumResult reported_outcome)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ceremony_id.Encode());
            byteArray.AddRange(reported_outcome.Encode());
            return new Method(24, "EvmThresholdSigner", 3, "report_keygen_outcome", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> report_key_handover_outcome
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ReportKeyHandoverOutcome(Substrate.NetApi.Model.Types.Primitive.U64 ceremony_id, Substrate.NetApiExt.Generated.Types.Base.EnumResult reported_outcome)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(ceremony_id.Encode());
            byteArray.AddRange(reported_outcome.Encode());
            return new Method(24, "EvmThresholdSigner", 4, "report_key_handover_outcome", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> on_keygen_verification_result
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method OnKeygenVerificationResult(Substrate.NetApi.Model.Types.Primitive.U64 keygen_ceremony_id, Substrate.NetApi.Model.Types.Primitive.U32 threshold_request_id, Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey new_public_key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(keygen_ceremony_id.Encode());
            byteArray.AddRange(threshold_request_id.Encode());
            byteArray.AddRange(new_public_key.Encode());
            return new Method(24, "EvmThresholdSigner", 5, "on_keygen_verification_result", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> on_handover_verification_result
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method OnHandoverVerificationResult(Substrate.NetApi.Model.Types.Primitive.U64 handover_ceremony_id, Substrate.NetApi.Model.Types.Primitive.U32 threshold_request_id, Substrate.NetApiExt.Generated.Model.cf_chains.evm.AggKey new_public_key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(handover_ceremony_id.Encode());
            byteArray.AddRange(threshold_request_id.Encode());
            byteArray.AddRange(new_public_key.Encode());
            return new Method(24, "EvmThresholdSigner", 6, "on_handover_verification_result", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_keygen_response_timeout
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetKeygenResponseTimeout(Substrate.NetApi.Model.Types.Primitive.U32 new_timeout)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_timeout.Encode());
            return new Method(24, "EvmThresholdSigner", 7, "set_keygen_response_timeout", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_keygen_slash_amount
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetKeygenSlashAmount(Substrate.NetApi.Model.Types.Primitive.U128 amount_to_slash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount_to_slash.Encode());
            return new Method(24, "EvmThresholdSigner", 8, "set_keygen_slash_amount", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EvmThresholdSignerConstants
    /// </summary>
    public sealed class EvmThresholdSignerConstants
    {
        
        /// <summary>
        /// >> CeremonyRetryDelay
        ///  In case not enough live nodes were available to begin a threshold signing ceremony: The
        ///  number of blocks to wait before retrying with a new set.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 CeremonyRetryDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x01000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> EvmThresholdSignerErrors
    /// </summary>
    public enum EvmThresholdSignerErrors
    {
        
        /// <summary>
        /// >> InvalidThresholdSignatureCeremonyId
        /// The provided ceremony id is invalid.
        /// </summary>
        InvalidThresholdSignatureCeremonyId,
        
        /// <summary>
        /// >> InvalidKeygenCeremonyId
        /// An invalid keygen ceremony id
        /// </summary>
        InvalidKeygenCeremonyId,
        
        /// <summary>
        /// >> InvalidThresholdSignature
        /// The provided threshold signature is invalid.
        /// </summary>
        InvalidThresholdSignature,
        
        /// <summary>
        /// >> InvalidThresholdSignatureRespondent
        /// The reporting party is not one of the signatories for this ceremony, or has already
        /// responded.
        /// </summary>
        InvalidThresholdSignatureRespondent,
        
        /// <summary>
        /// >> InvalidKeygenRespondent
        /// An authority sent a response for a ceremony in which they weren't involved, or to which
        /// they have already submitted a response.
        /// </summary>
        InvalidKeygenRespondent,
        
        /// <summary>
        /// >> InvalidRequestId
        /// The request Id is stale or not yet valid.
        /// </summary>
        InvalidRequestId,
        
        /// <summary>
        /// >> ThresholdSignatureUnavailable
        /// There is no threshold signature available
        /// </summary>
        ThresholdSignatureUnavailable,
        
        /// <summary>
        /// >> NoActiveRotation
        /// There is currently no rotation in progress for this key.
        /// </summary>
        NoActiveRotation,
        
        /// <summary>
        /// >> InvalidRotationStatus
        /// The requested call is invalid based on the current rotation state.
        /// </summary>
        InvalidRotationStatus,
    }
}
