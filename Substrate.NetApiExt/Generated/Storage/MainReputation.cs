//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> ReputationStorage
    /// </summary>
    public sealed class ReputationStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> ReputationStorage Constructor
        /// </summary>
        public ReputationStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "AccrualRatio"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.I32, Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "Reputations"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.reputation.ReputationTracker)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "Suspensions"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "Penalties"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.Penalty)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "OffenceTimeSlotTracker"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Reputation", "LastHeartbeat"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> AccrualRatioParams
        ///  The ratio at which one accrues Reputation points for online blocks.
        /// </summary>
        public static string AccrualRatioParams()
        {
            return RequestGenerator.GetStorage("Reputation", "AccrualRatio", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> AccrualRatioDefault
        /// Default value as hex string
        /// </summary>
        public static string AccrualRatioDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> AccrualRatio
        ///  The ratio at which one accrues Reputation points for online blocks.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.I32, Substrate.NetApi.Model.Types.Primitive.U32>> AccrualRatio(string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.AccrualRatioParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.I32, Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ReputationsParams
        ///  Reputation trackers for each node
        /// </summary>
        public static string ReputationsParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Reputation", "Reputations", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ReputationsDefault
        /// Default value as hex string
        /// </summary>
        public static string ReputationsDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Reputations
        ///  Reputation trackers for each node
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.reputation.ReputationTracker> Reputations(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.ReputationsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.reputation.ReputationTracker>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SuspensionsParams
        ///  Suspension tracking storage for each offence.
        /// </summary>
        public static string SuspensionsParams(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence key)
        {
            return RequestGenerator.GetStorage("Reputation", "Suspensions", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SuspensionsDefault
        /// Default value as hex string
        /// </summary>
        public static string SuspensionsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Suspensions
        ///  Suspension tracking storage for each offence.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>> Suspensions(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence key, string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.SuspensionsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32>>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PenaltiesParams
        ///  The penalty to be applied for each offence.
        /// </summary>
        public static string PenaltiesParams(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence key)
        {
            return RequestGenerator.GetStorage("Reputation", "Penalties", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PenaltiesDefault
        /// Default value as hex string
        /// </summary>
        public static string PenaltiesDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> Penalties
        ///  The penalty to be applied for each offence.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.Penalty> Penalties(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence key, string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.PenaltiesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.Penalty>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> OffenceTimeSlotTrackerParams
        ///  The time slot in which an offence has been reported. Only applies to offences that are
        ///  reported via the [ChainflipOffenceReportingAdapter].
        /// </summary>
        public static string OffenceTimeSlotTrackerParams(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> key)
        {
            return RequestGenerator.GetStorage("Reputation", "OffenceTimeSlotTracker", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> OffenceTimeSlotTrackerDefault
        /// Default value as hex string
        /// </summary>
        public static string OffenceTimeSlotTrackerDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> OffenceTimeSlotTracker
        ///  The time slot in which an offence has been reported. Only applies to offences that are
        ///  reported via the [ChainflipOffenceReportingAdapter].
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> OffenceTimeSlotTracker(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8> key, string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.OffenceTimeSlotTrackerParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LastHeartbeatParams
        ///  The last block numbers at which validators submitted a heartbeat.
        /// </summary>
        public static string LastHeartbeatParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("Reputation", "LastHeartbeat", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> LastHeartbeatDefault
        /// Default value as hex string
        /// </summary>
        public static string LastHeartbeatDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LastHeartbeat
        ///  The last block numbers at which validators submitted a heartbeat.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> LastHeartbeat(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = ReputationStorage.LastHeartbeatParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> ReputationCalls
    /// </summary>
    public sealed class ReputationCalls
    {
        
        /// <summary>
        /// >> update_accrual_ratio
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateAccrualRatio(Substrate.NetApi.Model.Types.Primitive.I32 reputation_points, Substrate.NetApi.Model.Types.Primitive.U32 number_of_blocks)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(reputation_points.Encode());
            byteArray.AddRange(number_of_blocks.Encode());
            return new Method(17, "Reputation", 0, "update_accrual_ratio", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_missed_heartbeat_penalty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateMissedHeartbeatPenalty(Substrate.NetApi.Model.Types.Primitive.I32 new_reputation_penalty)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_reputation_penalty.Encode());
            return new Method(17, "Reputation", 1, "update_missed_heartbeat_penalty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> set_penalty
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetPenalty(Substrate.NetApiExt.Generated.Model.state_chain_runtime.chainflip.offences.EnumOffence offence, Substrate.NetApiExt.Generated.Model.pallet_cf_reputation.Penalty new_penalty)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(offence.Encode());
            byteArray.AddRange(new_penalty.Encode());
            return new Method(17, "Reputation", 2, "set_penalty", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> heartbeat
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Heartbeat()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(17, "Reputation", 3, "heartbeat", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> ReputationConstants
    /// </summary>
    public sealed class ReputationConstants
    {
        
        /// <summary>
        /// >> HeartbeatBlockInterval
        ///  The number of blocks for the time frame we would test liveliness within
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 HeartbeatBlockInterval()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x96000000");
            return result;
        }
        
        /// <summary>
        /// >> ReputationPointFloorAndCeiling
        ///  The floor and ceiling values for a reputation score
        /// </summary>
        public Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.I32, Substrate.NetApi.Model.Types.Primitive.I32> ReputationPointFloorAndCeiling()
        {
            var result = new Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.I32, Substrate.NetApi.Model.Types.Primitive.I32>();
            result.Create("0xC0F4FFFF400B0000");
            return result;
        }
        
        /// <summary>
        /// >> MaximumAccruableReputation
        ///  The maximum number of reputation points that can be accrued
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.I32 MaximumAccruableReputation()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.I32();
            result.Create("0x0F000000");
            return result;
        }
    }
    
    /// <summary>
    /// >> ReputationErrors
    /// </summary>
    public enum ReputationErrors
    {
        
        /// <summary>
        /// >> InvalidAccrualRatio
        /// Tried to set the accrual ration to something invalid.
        /// </summary>
        InvalidAccrualRatio,
    }
}
