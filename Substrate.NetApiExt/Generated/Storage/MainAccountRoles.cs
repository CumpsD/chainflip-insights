//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> AccountRolesStorage
    /// </summary>
    public sealed class AccountRolesStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> AccountRolesStorage Constructor
        /// </summary>
        public AccountRolesStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AccountRoles", "AccountRoles"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32), typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.EnumAccountRole)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("AccountRoles", "VanityNames"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeMapT4)));
        }
        
        /// <summary>
        /// >> AccountRolesParams
        /// </summary>
        public static string AccountRolesParams(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key)
        {
            return RequestGenerator.GetStorage("AccountRoles", "AccountRoles", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> AccountRolesDefault
        /// Default value as hex string
        /// </summary>
        public static string AccountRolesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> AccountRoles
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_primitives.EnumAccountRole> AccountRoles(Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 key, string blockhash, CancellationToken token)
        {
            string parameters = AccountRolesStorage.AccountRolesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_primitives.EnumAccountRole>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> VanityNamesParams
        ///  Vanity names of the validators stored as a Map with the current validator IDs as key.
        /// </summary>
        public static string VanityNamesParams()
        {
            return RequestGenerator.GetStorage("AccountRoles", "VanityNames", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> VanityNamesDefault
        /// Default value as hex string
        /// </summary>
        public static string VanityNamesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> VanityNames
        ///  Vanity names of the validators stored as a Map with the current validator IDs as key.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT4> VanityNames(string blockhash, CancellationToken token)
        {
            string parameters = AccountRolesStorage.VanityNamesParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeMapT4>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> AccountRolesCalls
    /// </summary>
    public sealed class AccountRolesCalls
    {
        
        /// <summary>
        /// >> set_vanity_name
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SetVanityName(Substrate.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT2 name)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(name.Encode());
            return new Method(6, "AccountRoles", 0, "set_vanity_name", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> AccountRolesConstants
    /// </summary>
    public sealed class AccountRolesConstants
    {
    }
    
    /// <summary>
    /// >> AccountRolesErrors
    /// </summary>
    public enum AccountRolesErrors
    {
        
        /// <summary>
        /// >> UnknownAccount
        /// The account has never been created.
        /// </summary>
        UnknownAccount,
        
        /// <summary>
        /// >> AccountRoleAlreadyRegistered
        /// The account already has a registered role.
        /// </summary>
        AccountRoleAlreadyRegistered,
        
        /// <summary>
        /// >> InvalidCharactersInName
        /// Invalid characters in the name.
        /// </summary>
        InvalidCharactersInName,
    }
}
