//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EthereumChainTrackingStorage
    /// </summary>
    public sealed class EthereumChainTrackingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EthereumChainTrackingStorage Constructor
        /// </summary>
        public EthereumChainTrackingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumChainTracking", "CurrentChainState"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_chains.ChainStateT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("EthereumChainTracking", "FeeMultiplier"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128)));
        }
        
        /// <summary>
        /// >> CurrentChainStateParams
        ///  The tracked state of the external chain.
        ///  It is safe to unwrap() this value. We set it at genesis and it is only ever updated
        ///  by chain tracking, never removed. We use OptionQuery here so we don't need to
        ///  impl Default for ChainState.
        /// </summary>
        public static string CurrentChainStateParams()
        {
            return RequestGenerator.GetStorage("EthereumChainTracking", "CurrentChainState", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentChainStateDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentChainStateDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CurrentChainState
        ///  The tracked state of the external chain.
        ///  It is safe to unwrap() this value. We set it at genesis and it is only ever updated
        ///  by chain tracking, never removed. We use OptionQuery here so we don't need to
        ///  impl Default for ChainState.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_chains.ChainStateT1> CurrentChainState(string blockhash, CancellationToken token)
        {
            string parameters = EthereumChainTrackingStorage.CurrentChainStateParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_chains.ChainStateT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FeeMultiplierParams
        ///  The fee multiplier value used when estimating ingress/egree fees
        /// </summary>
        public static string FeeMultiplierParams()
        {
            return RequestGenerator.GetStorage("EthereumChainTracking", "FeeMultiplier", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FeeMultiplierDefault
        /// Default value as hex string
        /// </summary>
        public static string FeeMultiplierDefault()
        {
            return "0x000064A7B3B6E00D0000000000000000";
        }
        
        /// <summary>
        /// >> FeeMultiplier
        ///  The fee multiplier value used when estimating ingress/egree fees
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128> FeeMultiplier(string blockhash, CancellationToken token)
        {
            string parameters = EthereumChainTrackingStorage.FeeMultiplierParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EthereumChainTrackingCalls
    /// </summary>
    public sealed class EthereumChainTrackingCalls
    {
        
        /// <summary>
        /// >> update_chain_state
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateChainState(Substrate.NetApiExt.Generated.Model.cf_chains.ChainStateT1 new_chain_state)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_chain_state.Encode());
            return new Method(18, "EthereumChainTracking", 0, "update_chain_state", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_fee_multiplier
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateFeeMultiplier(Substrate.NetApiExt.Generated.Model.sp_arithmetic.fixed_point.FixedU128 new_fee_multiplier)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(new_fee_multiplier.Encode());
            return new Method(18, "EthereumChainTracking", 1, "update_fee_multiplier", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EthereumChainTrackingConstants
    /// </summary>
    public sealed class EthereumChainTrackingConstants
    {
    }
    
    /// <summary>
    /// >> EthereumChainTrackingErrors
    /// </summary>
    public enum EthereumChainTrackingErrors
    {
        
        /// <summary>
        /// >> StaleDataSubmitted
        /// The submitted data is too old.
        /// </summary>
        StaleDataSubmitted,
        
        /// <summary>
        /// >> InvalidBlockHeight
        /// Block height must be a multiple of the witness period
        /// </summary>
        InvalidBlockHeight,
    }
}
