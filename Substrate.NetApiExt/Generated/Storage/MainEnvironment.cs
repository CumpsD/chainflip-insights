//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> EnvironmentStorage
    /// </summary>
    public sealed class EnvironmentStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> EnvironmentStorage Constructor
        /// </summary>
        public EnvironmentStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumSupportedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.eth.EnumAsset), typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumStateChainGatewayAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumKeyManagerAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumVaultAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumAddressCheckerAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumChainId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "EthereumSignatureNonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "PolkadotGenesisHash"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H256)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "PolkadotVaultAccountId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_chains.dot.PolkadotAccountId)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "PolkadotProxyAccountNonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "BitcoinAvailableUtxos"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.cf_chains.btc.Utxo>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ConsolidationParameters"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_chains.btc.utxo_selection.ConsolidationParameters)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumSupportedAssets"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.arb.EnumAsset), typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumKeyManagerAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumVaultAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumAddressCheckerAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.primitive_types.H160)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumChainId"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ArbitrumSignatureNonce"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "RuntimeSafeMode"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.state_chain_runtime.safe_mode.@__inner.RuntimeSafeMode)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "CurrentReleaseVersion"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Environment", "ChainflipNetworkEnvironment"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.EnumNetworkEnvironment)));
        }
        
        /// <summary>
        /// >> EthereumSupportedAssetsParams
        ///  Map of supported assets for ETH
        /// </summary>
        public static string EthereumSupportedAssetsParams(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.eth.EnumAsset key)
        {
            return RequestGenerator.GetStorage("Environment", "EthereumSupportedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> EthereumSupportedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumSupportedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EthereumSupportedAssets
        ///  Map of supported assets for ETH
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> EthereumSupportedAssets(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.eth.EnumAsset key, string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumSupportedAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumStateChainGatewayAddressParams
        ///  The address of the ETH state chain gatweay contract
        /// </summary>
        public static string EthereumStateChainGatewayAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumStateChainGatewayAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumStateChainGatewayAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumStateChainGatewayAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EthereumStateChainGatewayAddress
        ///  The address of the ETH state chain gatweay contract
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> EthereumStateChainGatewayAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumStateChainGatewayAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumKeyManagerAddressParams
        ///  The address of the ETH key manager contract
        /// </summary>
        public static string EthereumKeyManagerAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumKeyManagerAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumKeyManagerAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumKeyManagerAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EthereumKeyManagerAddress
        ///  The address of the ETH key manager contract
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> EthereumKeyManagerAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumKeyManagerAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumVaultAddressParams
        ///  The address of the ETH vault contract
        /// </summary>
        public static string EthereumVaultAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumVaultAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumVaultAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumVaultAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EthereumVaultAddress
        ///  The address of the ETH vault contract
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> EthereumVaultAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumVaultAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumAddressCheckerAddressParams
        ///  The address of the Address Checker contract on ETH
        /// </summary>
        public static string EthereumAddressCheckerAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumAddressCheckerAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumAddressCheckerAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumAddressCheckerAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EthereumAddressCheckerAddress
        ///  The address of the Address Checker contract on ETH
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> EthereumAddressCheckerAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumAddressCheckerAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumChainIdParams
        ///  The ETH chain id
        /// </summary>
        public static string EthereumChainIdParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumChainId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumChainIdDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumChainIdDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> EthereumChainId
        ///  The ETH chain id
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> EthereumChainId(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumChainIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EthereumSignatureNonceParams
        /// </summary>
        public static string EthereumSignatureNonceParams()
        {
            return RequestGenerator.GetStorage("Environment", "EthereumSignatureNonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EthereumSignatureNonceDefault
        /// Default value as hex string
        /// </summary>
        public static string EthereumSignatureNonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> EthereumSignatureNonce
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> EthereumSignatureNonce(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.EthereumSignatureNonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PolkadotGenesisHashParams
        /// </summary>
        public static string PolkadotGenesisHashParams()
        {
            return RequestGenerator.GetStorage("Environment", "PolkadotGenesisHash", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PolkadotGenesisHashDefault
        /// Default value as hex string
        /// </summary>
        public static string PolkadotGenesisHashDefault()
        {
            return "0x0000000000000000000000000000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> PolkadotGenesisHash
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H256> PolkadotGenesisHash(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.PolkadotGenesisHashParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H256>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PolkadotVaultAccountIdParams
        ///  The Polkadot Vault Anonymous Account
        /// </summary>
        public static string PolkadotVaultAccountIdParams()
        {
            return RequestGenerator.GetStorage("Environment", "PolkadotVaultAccountId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PolkadotVaultAccountIdDefault
        /// Default value as hex string
        /// </summary>
        public static string PolkadotVaultAccountIdDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PolkadotVaultAccountId
        ///  The Polkadot Vault Anonymous Account
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_chains.dot.PolkadotAccountId> PolkadotVaultAccountId(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.PolkadotVaultAccountIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_chains.dot.PolkadotAccountId>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PolkadotProxyAccountNonceParams
        ///  Current Nonce of the current Polkadot Proxy Account
        /// </summary>
        public static string PolkadotProxyAccountNonceParams()
        {
            return RequestGenerator.GetStorage("Environment", "PolkadotProxyAccountNonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> PolkadotProxyAccountNonceDefault
        /// Default value as hex string
        /// </summary>
        public static string PolkadotProxyAccountNonceDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> PolkadotProxyAccountNonce
        ///  Current Nonce of the current Polkadot Proxy Account
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> PolkadotProxyAccountNonce(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.PolkadotProxyAccountNonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BitcoinAvailableUtxosParams
        ///  The set of available UTXOs available in our Bitcoin Vault.
        /// </summary>
        public static string BitcoinAvailableUtxosParams()
        {
            return RequestGenerator.GetStorage("Environment", "BitcoinAvailableUtxos", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> BitcoinAvailableUtxosDefault
        /// Default value as hex string
        /// </summary>
        public static string BitcoinAvailableUtxosDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> BitcoinAvailableUtxos
        ///  The set of available UTXOs available in our Bitcoin Vault.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.cf_chains.btc.Utxo>> BitcoinAvailableUtxos(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.BitcoinAvailableUtxosParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.cf_chains.btc.Utxo>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ConsolidationParametersParams
        /// </summary>
        public static string ConsolidationParametersParams()
        {
            return RequestGenerator.GetStorage("Environment", "ConsolidationParameters", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ConsolidationParametersDefault
        /// Default value as hex string
        /// </summary>
        public static string ConsolidationParametersDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ConsolidationParameters
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_chains.btc.utxo_selection.ConsolidationParameters> ConsolidationParameters(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ConsolidationParametersParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_chains.btc.utxo_selection.ConsolidationParameters>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumSupportedAssetsParams
        ///  Map of supported assets for ARB
        /// </summary>
        public static string ArbitrumSupportedAssetsParams(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.arb.EnumAsset key)
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumSupportedAssets", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.BlakeTwo128Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ArbitrumSupportedAssetsDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumSupportedAssetsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ArbitrumSupportedAssets
        ///  Map of supported assets for ARB
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> ArbitrumSupportedAssets(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.arb.EnumAsset key, string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumSupportedAssetsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumKeyManagerAddressParams
        ///  The address of the ARB key manager contract
        /// </summary>
        public static string ArbitrumKeyManagerAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumKeyManagerAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ArbitrumKeyManagerAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumKeyManagerAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ArbitrumKeyManagerAddress
        ///  The address of the ARB key manager contract
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> ArbitrumKeyManagerAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumKeyManagerAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumVaultAddressParams
        ///  The address of the ARB vault contract
        /// </summary>
        public static string ArbitrumVaultAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumVaultAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ArbitrumVaultAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumVaultAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ArbitrumVaultAddress
        ///  The address of the ARB vault contract
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> ArbitrumVaultAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumVaultAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumAddressCheckerAddressParams
        ///  The address of the Address Checker contract on Arbitrum.
        /// </summary>
        public static string ArbitrumAddressCheckerAddressParams()
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumAddressCheckerAddress", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ArbitrumAddressCheckerAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumAddressCheckerAddressDefault()
        {
            return "0x0000000000000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> ArbitrumAddressCheckerAddress
        ///  The address of the Address Checker contract on Arbitrum.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.primitive_types.H160> ArbitrumAddressCheckerAddress(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumAddressCheckerAddressParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.primitive_types.H160>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumChainIdParams
        ///  The ARB chain id
        /// </summary>
        public static string ArbitrumChainIdParams()
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumChainId", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ArbitrumChainIdDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumChainIdDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ArbitrumChainId
        ///  The ARB chain id
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ArbitrumChainId(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumChainIdParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ArbitrumSignatureNonceParams
        /// </summary>
        public static string ArbitrumSignatureNonceParams()
        {
            return RequestGenerator.GetStorage("Environment", "ArbitrumSignatureNonce", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ArbitrumSignatureNonceDefault
        /// Default value as hex string
        /// </summary>
        public static string ArbitrumSignatureNonceDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> ArbitrumSignatureNonce
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> ArbitrumSignatureNonce(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ArbitrumSignatureNonceParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> RuntimeSafeModeParams
        ///  Stores the current safe mode state for the runtime.
        /// </summary>
        public static string RuntimeSafeModeParams()
        {
            return RequestGenerator.GetStorage("Environment", "RuntimeSafeMode", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> RuntimeSafeModeDefault
        /// Default value as hex string
        /// </summary>
        public static string RuntimeSafeModeDefault()
        {
            return "0x01010101010101010101010101010101010101010001010101010101010101010101010101";
        }
        
        /// <summary>
        /// >> RuntimeSafeMode
        ///  Stores the current safe mode state for the runtime.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.state_chain_runtime.safe_mode.@__inner.RuntimeSafeMode> RuntimeSafeMode(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.RuntimeSafeModeParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.state_chain_runtime.safe_mode.__inner.RuntimeSafeMode>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CurrentReleaseVersionParams
        ///  Always set to the current release version. We duplicate the `CurrentReleaseVersion` pallet
        ///  constant to allow querying the value by block hash.
        /// </summary>
        public static string CurrentReleaseVersionParams()
        {
            return RequestGenerator.GetStorage("Environment", "CurrentReleaseVersion", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CurrentReleaseVersionDefault
        /// Default value as hex string
        /// </summary>
        public static string CurrentReleaseVersionDefault()
        {
            return "0x000000";
        }
        
        /// <summary>
        /// >> CurrentReleaseVersion
        ///  Always set to the current release version. We duplicate the `CurrentReleaseVersion` pallet
        ///  constant to allow querying the value by block hash.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer> CurrentReleaseVersion(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.CurrentReleaseVersionParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ChainflipNetworkEnvironmentParams
        ///  Contains the network environment for this runtime.
        /// </summary>
        public static string ChainflipNetworkEnvironmentParams()
        {
            return RequestGenerator.GetStorage("Environment", "ChainflipNetworkEnvironment", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> ChainflipNetworkEnvironmentDefault
        /// Default value as hex string
        /// </summary>
        public static string ChainflipNetworkEnvironmentDefault()
        {
            return "0x02";
        }
        
        /// <summary>
        /// >> ChainflipNetworkEnvironment
        ///  Contains the network environment for this runtime.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_primitives.EnumNetworkEnvironment> ChainflipNetworkEnvironment(string blockhash, CancellationToken token)
        {
            string parameters = EnvironmentStorage.ChainflipNetworkEnvironmentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_primitives.EnumNetworkEnvironment>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> EnvironmentCalls
    /// </summary>
    public sealed class EnvironmentCalls
    {
        
        /// <summary>
        /// >> witness_polkadot_vault_creation
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WitnessPolkadotVaultCreation(Substrate.NetApiExt.Generated.Model.cf_chains.dot.PolkadotAccountId dot_pure_proxy_vault_key, Substrate.NetApiExt.Generated.Model.cf_primitives.TxId tx_id)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(dot_pure_proxy_vault_key.Encode());
            byteArray.AddRange(tx_id.Encode());
            return new Method(2, "Environment", 1, "witness_polkadot_vault_creation", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> witness_current_bitcoin_block_number_for_key
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WitnessCurrentBitcoinBlockNumberForKey(Substrate.NetApi.Model.Types.Primitive.U64 block_number, Substrate.NetApiExt.Generated.Model.cf_chains.btc.AggKey new_public_key)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(block_number.Encode());
            byteArray.AddRange(new_public_key.Encode());
            return new Method(2, "Environment", 2, "witness_current_bitcoin_block_number_for_key", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_safe_mode
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateSafeMode(Substrate.NetApiExt.Generated.Model.pallet_cf_environment.EnumSafeModeUpdate update)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(update.Encode());
            return new Method(2, "Environment", 3, "update_safe_mode", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_consolidation_parameters
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdateConsolidationParameters(Substrate.NetApiExt.Generated.Model.cf_chains.btc.utxo_selection.ConsolidationParameters @params)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(@params.Encode());
            return new Method(2, "Environment", 4, "update_consolidation_parameters", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> witness_initialize_arbitrum_vault
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WitnessInitializeArbitrumVault(Substrate.NetApi.Model.Types.Primitive.U64 block_number)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(block_number.Encode());
            return new Method(2, "Environment", 5, "witness_initialize_arbitrum_vault", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> EnvironmentConstants
    /// </summary>
    public sealed class EnvironmentConstants
    {
        
        /// <summary>
        /// >> CurrentReleaseVersion
        ///  Used to access the current Chainflip runtime's release version (distinct from the
        ///  substrate RuntimeVersion)
        /// </summary>
        public Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer CurrentReleaseVersion()
        {
            var result = new Substrate.NetApiExt.Generated.Model.cf_primitives.SemVer();
            result.Create("0x010403");
            return result;
        }
    }
    
    /// <summary>
    /// >> EnvironmentErrors
    /// </summary>
    public enum EnvironmentErrors
    {
        
        /// <summary>
        /// >> EthAddressNotUpdateable
        /// Eth is not an Erc20 token, so its address can't be updated.
        /// </summary>
        EthAddressNotUpdateable,
    }
}
