//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> TokenholderGovernanceStorage
    /// </summary>
    public sealed class TokenholderGovernanceStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> TokenholderGovernanceStorage Constructor
        /// </summary>
        public TokenholderGovernanceStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenholderGovernance", "Proposals"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenholderGovernance", "Backers"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal), typeof(Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenholderGovernance", "GovKeyUpdateAwaitingEnactment"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenholderGovernance", "CommKeyUpdateAwaitingEnactment"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.primitive_types.H160>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TokenholderGovernance", "GovKeys"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>)));
        }
        
        /// <summary>
        /// >> ProposalsParams
        ///  All unresolved proposals that are open for backing, indexed by the block at which the vote
        ///  will be resolved.
        /// </summary>
        public static string ProposalsParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("TokenholderGovernance", "Proposals", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> ProposalsDefault
        /// Default value as hex string
        /// </summary>
        public static string ProposalsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Proposals
        ///  All unresolved proposals that are open for backing, indexed by the block at which the vote
        ///  will be resolved.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal> Proposals(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = TokenholderGovernanceStorage.ProposalsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> BackersParams
        ///  The accounts currently backing each proposal.
        /// </summary>
        public static string BackersParams(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal key)
        {
            return RequestGenerator.GetStorage("TokenholderGovernance", "Backers", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> BackersDefault
        /// Default value as hex string
        /// </summary>
        public static string BackersDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Backers
        ///  The accounts currently backing each proposal.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1> Backers(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal key, string blockhash, CancellationToken token)
        {
            string parameters = TokenholderGovernanceStorage.BackersParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Types.Base.BTreeSetT1>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GovKeyUpdateAwaitingEnactmentParams
        ///  The Government key proposal currently awaiting enactment, if any. Indexed by the block
        ///  number we will attempt to enact this update.
        /// </summary>
        public static string GovKeyUpdateAwaitingEnactmentParams()
        {
            return RequestGenerator.GetStorage("TokenholderGovernance", "GovKeyUpdateAwaitingEnactment", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> GovKeyUpdateAwaitingEnactmentDefault
        /// Default value as hex string
        /// </summary>
        public static string GovKeyUpdateAwaitingEnactmentDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GovKeyUpdateAwaitingEnactment
        ///  The Government key proposal currently awaiting enactment, if any. Indexed by the block
        ///  number we will attempt to enact this update.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>>> GovKeyUpdateAwaitingEnactment(string blockhash, CancellationToken token)
        {
            string parameters = TokenholderGovernanceStorage.GovKeyUpdateAwaitingEnactmentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain, Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CommKeyUpdateAwaitingEnactmentParams
        ///  The Community key proposal currently awaiting enactment, if any. Indexed by the block number
        ///  we will attempt to enact this update.
        /// </summary>
        public static string CommKeyUpdateAwaitingEnactmentParams()
        {
            return RequestGenerator.GetStorage("TokenholderGovernance", "CommKeyUpdateAwaitingEnactment", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CommKeyUpdateAwaitingEnactmentDefault
        /// Default value as hex string
        /// </summary>
        public static string CommKeyUpdateAwaitingEnactmentDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CommKeyUpdateAwaitingEnactment
        ///  The Community key proposal currently awaiting enactment, if any. Indexed by the block number
        ///  we will attempt to enact this update.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.primitive_types.H160>> CommKeyUpdateAwaitingEnactment(string blockhash, CancellationToken token)
        {
            string parameters = TokenholderGovernanceStorage.CommKeyUpdateAwaitingEnactmentParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.primitive_types.H160>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> GovKeysParams
        ///  Current Governance keys for foreign chains.
        /// </summary>
        public static string GovKeysParams(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain key)
        {
            return RequestGenerator.GetStorage("TokenholderGovernance", "GovKeys", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> GovKeysDefault
        /// Default value as hex string
        /// </summary>
        public static string GovKeysDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> GovKeys
        ///  Current Governance keys for foreign chains.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> GovKeys(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain key, string blockhash, CancellationToken token)
        {
            string parameters = TokenholderGovernanceStorage.GovKeysParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenholderGovernanceCalls
    /// </summary>
    public sealed class TokenholderGovernanceCalls
    {
        
        /// <summary>
        /// >> submit_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method SubmitProposal(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(16, "TokenholderGovernance", 0, "submit_proposal", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> back_proposal
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method BackProposal(Substrate.NetApiExt.Generated.Model.pallet_cf_tokenholder_governance.EnumProposal proposal)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(proposal.Encode());
            return new Method(16, "TokenholderGovernance", 1, "back_proposal", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> TokenholderGovernanceConstants
    /// </summary>
    public sealed class TokenholderGovernanceConstants
    {
        
        /// <summary>
        /// >> VotingPeriod
        ///  Voting period of a proposal in blocks.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 VotingPeriod()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0x80130300");
            return result;
        }
        
        /// <summary>
        /// >> ProposalFee
        ///  The cost of a proposal in FLIPPERINOS.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U128 ProposalFee()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U128();
            result.Create("0x0000A0DEC5ADC9353600000000000000");
            return result;
        }
        
        /// <summary>
        /// >> EnactmentDelay
        ///  Delay in blocks after a successfully backed proposal gets executed.
        /// </summary>
        public Substrate.NetApi.Model.Types.Primitive.U32 EnactmentDelay()
        {
            var result = new Substrate.NetApi.Model.Types.Primitive.U32();
            result.Create("0xC0890100");
            return result;
        }
    }
    
    /// <summary>
    /// >> TokenholderGovernanceErrors
    /// </summary>
    public enum TokenholderGovernanceErrors
    {
        
        /// <summary>
        /// >> AlreadyBacked
        /// Proposal is already backed by the same account.
        /// </summary>
        AlreadyBacked,
        
        /// <summary>
        /// >> ProposalDoesntExist
        /// Proposal doesn't exist.
        /// </summary>
        ProposalDoesntExist,
        
        /// <summary>
        /// >> IncompatibleGovkey
        /// The proposed governance key is incompatible with the proposed chain.
        /// </summary>
        IncompatibleGovkey,
    }
}
