//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> SwappingStorage
    /// </summary>
    public sealed class SwappingStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> SwappingStorage Constructor
        /// </summary>
        public SwappingStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "SwapQueue"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U32), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.Swap>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "FirstUnprocessedBlock"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "SwapIdCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "EarnedBrokerFees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "CcmIdCounter"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U64)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "PendingCcms"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwap)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "CcmOutputs"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Primitive.U64), typeof(Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwapOutput)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "CollectedRejectedFunds"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "MaximumSwapAmount"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Swapping", "FlipToBurn"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
        }
        
        /// <summary>
        /// >> SwapQueueParams
        ///  Scheduled Swaps
        /// </summary>
        public static string SwapQueueParams(Substrate.NetApi.Model.Types.Primitive.U32 key)
        {
            return RequestGenerator.GetStorage("Swapping", "SwapQueue", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> SwapQueueDefault
        /// Default value as hex string
        /// </summary>
        public static string SwapQueueDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> SwapQueue
        ///  Scheduled Swaps
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.Swap>> SwapQueue(Substrate.NetApi.Model.Types.Primitive.U32 key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.SwapQueueParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.Swap>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FirstUnprocessedBlockParams
        ///  The first block for which swaps haven't yet been processed
        /// </summary>
        public static string FirstUnprocessedBlockParams()
        {
            return RequestGenerator.GetStorage("Swapping", "FirstUnprocessedBlock", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FirstUnprocessedBlockDefault
        /// Default value as hex string
        /// </summary>
        public static string FirstUnprocessedBlockDefault()
        {
            return "0x00000000";
        }
        
        /// <summary>
        /// >> FirstUnprocessedBlock
        ///  The first block for which swaps haven't yet been processed
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> FirstUnprocessedBlock(string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.FirstUnprocessedBlockParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> SwapIdCounterParams
        ///  SwapId Counter
        /// </summary>
        public static string SwapIdCounterParams()
        {
            return RequestGenerator.GetStorage("Swapping", "SwapIdCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SwapIdCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string SwapIdCounterDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> SwapIdCounter
        ///  SwapId Counter
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> SwapIdCounter(string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.SwapIdCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EarnedBrokerFeesParams
        ///  Earned Fees by Brokers
        /// </summary>
        public static string EarnedBrokerFeesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key)
        {
            return RequestGenerator.GetStorage("Swapping", "EarnedBrokerFees", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> EarnedBrokerFeesDefault
        /// Default value as hex string
        /// </summary>
        public static string EarnedBrokerFeesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> EarnedBrokerFees
        ///  Earned Fees by Brokers
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> EarnedBrokerFees(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.EarnedBrokerFeesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CcmIdCounterParams
        ///  Cross chain messages Counter
        /// </summary>
        public static string CcmIdCounterParams()
        {
            return RequestGenerator.GetStorage("Swapping", "CcmIdCounter", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> CcmIdCounterDefault
        /// Default value as hex string
        /// </summary>
        public static string CcmIdCounterDefault()
        {
            return "0x0000000000000000";
        }
        
        /// <summary>
        /// >> CcmIdCounter
        ///  Cross chain messages Counter
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U64> CcmIdCounter(string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.CcmIdCounterParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U64>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> PendingCcmsParams
        ///  Storage for storing CCMs pending assets to be swapped.
        /// </summary>
        public static string PendingCcmsParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Swapping", "PendingCcms", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> PendingCcmsDefault
        /// Default value as hex string
        /// </summary>
        public static string PendingCcmsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> PendingCcms
        ///  Storage for storing CCMs pending assets to be swapped.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwap> PendingCcms(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.PendingCcmsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwap>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CcmOutputsParams
        ///  Tracks the outputs of Ccm swaps.
        /// </summary>
        public static string CcmOutputsParams(Substrate.NetApi.Model.Types.Primitive.U64 key)
        {
            return RequestGenerator.GetStorage("Swapping", "CcmOutputs", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CcmOutputsDefault
        /// Default value as hex string
        /// </summary>
        public static string CcmOutputsDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CcmOutputs
        ///  Tracks the outputs of Ccm swaps.
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwapOutput> CcmOutputs(Substrate.NetApi.Model.Types.Primitive.U64 key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.CcmOutputsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.pallet_cf_swapping.CcmSwapOutput>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CollectedRejectedFundsParams
        ///  Fund accrued from rejected swap and CCM calls.
        /// </summary>
        public static string CollectedRejectedFundsParams(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset key)
        {
            return RequestGenerator.GetStorage("Swapping", "CollectedRejectedFunds", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> CollectedRejectedFundsDefault
        /// Default value as hex string
        /// </summary>
        public static string CollectedRejectedFundsDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> CollectedRejectedFunds
        ///  Fund accrued from rejected swap and CCM calls.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> CollectedRejectedFunds(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.CollectedRejectedFundsParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> MaximumSwapAmountParams
        ///  Maximum amount allowed to be put into a swap. Excess amounts are confiscated.
        /// </summary>
        public static string MaximumSwapAmountParams(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset key)
        {
            return RequestGenerator.GetStorage("Swapping", "MaximumSwapAmount", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, new Substrate.NetApi.Model.Types.IType[] {
                        key});
        }
        
        /// <summary>
        /// >> MaximumSwapAmountDefault
        /// Default value as hex string
        /// </summary>
        public static string MaximumSwapAmountDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> MaximumSwapAmount
        ///  Maximum amount allowed to be put into a swap. Excess amounts are confiscated.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> MaximumSwapAmount(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset key, string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.MaximumSwapAmountParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> FlipToBurnParams
        ///  FLIP ready to be burned.
        /// </summary>
        public static string FlipToBurnParams()
        {
            return RequestGenerator.GetStorage("Swapping", "FlipToBurn", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> FlipToBurnDefault
        /// Default value as hex string
        /// </summary>
        public static string FlipToBurnDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> FlipToBurn
        ///  FLIP ready to be burned.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> FlipToBurn(string blockhash, CancellationToken token)
        {
            string parameters = SwappingStorage.FlipToBurnParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> SwappingCalls
    /// </summary>
    public sealed class SwappingCalls
    {
        
        /// <summary>
        /// >> request_swap_deposit_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RequestSwapDepositAddress(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset source_asset, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset destination_asset, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address, Substrate.NetApi.Model.Types.Primitive.U16 broker_commission, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApiExt.Generated.Model.cf_chains.CcmChannelMetadata> channel_metadata, Substrate.NetApi.Model.Types.Primitive.U16 boost_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source_asset.Encode());
            byteArray.AddRange(destination_asset.Encode());
            byteArray.AddRange(destination_address.Encode());
            byteArray.AddRange(broker_commission.Encode());
            byteArray.AddRange(channel_metadata.Encode());
            byteArray.AddRange(boost_fee.Encode());
            return new Method(30, "Swapping", 0, "request_swap_deposit_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Withdraw(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset asset, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(destination_address.Encode());
            return new Method(30, "Swapping", 1, "withdraw", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> schedule_swap_from_contract
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ScheduleSwapFromContract(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset from, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset to, Substrate.NetApi.Model.Types.Primitive.U128 deposit_amount, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address, Substrate.NetApiExt.Generated.Types.Base.Arr32U8 tx_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(from.Encode());
            byteArray.AddRange(to.Encode());
            byteArray.AddRange(deposit_amount.Encode());
            byteArray.AddRange(destination_address.Encode());
            byteArray.AddRange(tx_hash.Encode());
            return new Method(30, "Swapping", 2, "schedule_swap_from_contract", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> ccm_deposit
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method CcmDeposit(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset source_asset, Substrate.NetApi.Model.Types.Primitive.U128 deposit_amount, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset destination_asset, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address, Substrate.NetApiExt.Generated.Model.cf_chains.CcmDepositMetadata deposit_metadata, Substrate.NetApiExt.Generated.Types.Base.Arr32U8 tx_hash)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source_asset.Encode());
            byteArray.AddRange(deposit_amount.Encode());
            byteArray.AddRange(destination_asset.Encode());
            byteArray.AddRange(destination_address.Encode());
            byteArray.AddRange(deposit_metadata.Encode());
            byteArray.AddRange(tx_hash.Encode());
            return new Method(30, "Swapping", 3, "ccm_deposit", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_as_broker
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterAsBroker()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(30, "Swapping", 4, "register_as_broker", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> update_pallet_config
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method UpdatePalletConfig(Substrate.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT6 updates)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(updates.Encode());
            return new Method(30, "Swapping", 8, "update_pallet_config", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deregister_as_broker
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DeregisterAsBroker()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(30, "Swapping", 9, "deregister_as_broker", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> request_swap_deposit_address_with_affiliates
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RequestSwapDepositAddressWithAffiliates(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset source_asset, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset destination_asset, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address, Substrate.NetApi.Model.Types.Primitive.U16 broker_commission, Substrate.NetApi.Model.Types.Base.BaseOpt<Substrate.NetApiExt.Generated.Model.cf_chains.CcmChannelMetadata> channel_metadata, Substrate.NetApi.Model.Types.Primitive.U16 boost_fee, Substrate.NetApiExt.Generated.Model.bounded_collections.bounded_vec.BoundedVecT7 affiliate_fees)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(source_asset.Encode());
            byteArray.AddRange(destination_asset.Encode());
            byteArray.AddRange(destination_address.Encode());
            byteArray.AddRange(broker_commission.Encode());
            byteArray.AddRange(channel_metadata.Encode());
            byteArray.AddRange(boost_fee.Encode());
            byteArray.AddRange(affiliate_fees.Encode());
            return new Method(30, "Swapping", 10, "request_swap_deposit_address_with_affiliates", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> SwappingConstants
    /// </summary>
    public sealed class SwappingConstants
    {
    }
    
    /// <summary>
    /// >> SwappingErrors
    /// </summary>
    public enum SwappingErrors
    {
        
        /// <summary>
        /// >> IncompatibleAssetAndAddress
        /// The provided asset and withdrawal address are incompatible.
        /// </summary>
        IncompatibleAssetAndAddress,
        
        /// <summary>
        /// >> InvalidEgressAddress
        /// The Asset cannot be egressed because the destination address is not invalid.
        /// </summary>
        InvalidEgressAddress,
        
        /// <summary>
        /// >> NoFundsAvailable
        /// The withdrawal is not possible because not enough funds are available.
        /// </summary>
        NoFundsAvailable,
        
        /// <summary>
        /// >> CcmUnsupportedForTargetChain
        /// The target chain does not support CCM.
        /// </summary>
        CcmUnsupportedForTargetChain,
        
        /// <summary>
        /// >> CcmInsufficientDepositAmount
        /// The deposited amount is insufficient to pay for the gas budget.
        /// </summary>
        CcmInsufficientDepositAmount,
        
        /// <summary>
        /// >> InvalidDestinationAddress
        /// The provided address could not be decoded.
        /// </summary>
        InvalidDestinationAddress,
        
        /// <summary>
        /// >> WithdrawalsDisabled
        /// Withdrawals are disabled due to Safe Mode.
        /// </summary>
        WithdrawalsDisabled,
        
        /// <summary>
        /// >> BrokerRegistrationDisabled
        /// Broker registration is disabled due to Safe Mode.
        /// </summary>
        BrokerRegistrationDisabled,
        
        /// <summary>
        /// >> BrokerCommissionBpsTooHigh
        /// Broker commission bps is limited to 1000 points.
        /// </summary>
        BrokerCommissionBpsTooHigh,
        
        /// <summary>
        /// >> EarnedFeesNotWithdrawn
        /// Brokers should withdraw their earned fees before deregistering.
        /// </summary>
        EarnedFeesNotWithdrawn,
        
        /// <summary>
        /// >> AffiliateAccountIsNotABroker
        /// The provided list of broker contains an account which is not registered as Broker
        /// </summary>
        AffiliateAccountIsNotABroker,
    }
}
