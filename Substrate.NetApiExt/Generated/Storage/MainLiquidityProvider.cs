//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> LiquidityProviderStorage
    /// </summary>
    public sealed class LiquidityProviderStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> LiquidityProviderStorage Constructor
        /// </summary>
        public LiquidityProviderStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LiquidityProvider", "FreeBalances"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LiquidityProvider", "HistoricalEarnedFees"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset>), typeof(Substrate.NetApi.Model.Types.Primitive.U128)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("LiquidityProvider", "LiquidityRefundAddress"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain>), typeof(Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumForeignChainAddress)));
        }
        
        /// <summary>
        /// >> FreeBalancesParams
        ///  Storage for user's free balances/ DoubleMap: (AccountId, Asset) => Balance
        /// </summary>
        public static string FreeBalancesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key)
        {
            return RequestGenerator.GetStorage("LiquidityProvider", "FreeBalances", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> FreeBalancesDefault
        /// Default value as hex string
        /// </summary>
        public static string FreeBalancesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> FreeBalances
        ///  Storage for user's free balances/ DoubleMap: (AccountId, Asset) => Balance
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> FreeBalances(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key, string blockhash, CancellationToken token)
        {
            string parameters = LiquidityProviderStorage.FreeBalancesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> HistoricalEarnedFeesParams
        ///  Historical earned fees for an account.
        /// </summary>
        public static string HistoricalEarnedFeesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key)
        {
            return RequestGenerator.GetStorage("LiquidityProvider", "HistoricalEarnedFees", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> HistoricalEarnedFeesDefault
        /// Default value as hex string
        /// </summary>
        public static string HistoricalEarnedFeesDefault()
        {
            return "0x00000000000000000000000000000000";
        }
        
        /// <summary>
        /// >> HistoricalEarnedFees
        ///  Historical earned fees for an account.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U128> HistoricalEarnedFees(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset> key, string blockhash, CancellationToken token)
        {
            string parameters = LiquidityProviderStorage.HistoricalEarnedFeesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U128>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> LiquidityRefundAddressParams
        ///  Stores the registered energency withdrawal address for an Account
        /// </summary>
        public static string LiquidityRefundAddressParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain> key)
        {
            return RequestGenerator.GetStorage("LiquidityProvider", "LiquidityRefundAddress", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat}, key.Value);
        }
        
        /// <summary>
        /// >> LiquidityRefundAddressDefault
        /// Default value as hex string
        /// </summary>
        public static string LiquidityRefundAddressDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> LiquidityRefundAddress
        ///  Stores the registered energency withdrawal address for an Account
        /// </summary>
        public async Task<Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumForeignChainAddress> LiquidityRefundAddress(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.EnumForeignChain> key, string blockhash, CancellationToken token)
        {
            string parameters = LiquidityProviderStorage.LiquidityRefundAddressParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumForeignChainAddress>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> LiquidityProviderCalls
    /// </summary>
    public sealed class LiquidityProviderCalls
    {
        
        /// <summary>
        /// >> request_liquidity_deposit_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RequestLiquidityDepositAddress(Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset asset, Substrate.NetApi.Model.Types.Primitive.U16 boost_fee)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(boost_fee.Encode());
            return new Method(31, "LiquidityProvider", 0, "request_liquidity_deposit_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> withdraw_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WithdrawAsset(Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset asset, Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress destination_address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(destination_address.Encode());
            return new Method(31, "LiquidityProvider", 1, "withdraw_asset", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_lp_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterLpAccount()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(31, "LiquidityProvider", 2, "register_lp_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> register_liquidity_refund_address
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method RegisterLiquidityRefundAddress(Substrate.NetApiExt.Generated.Model.cf_chains.address.EnumEncodedAddress address)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(address.Encode());
            return new Method(31, "LiquidityProvider", 4, "register_liquidity_refund_address", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> deregister_lp_account
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method DeregisterLpAccount()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(31, "LiquidityProvider", 5, "deregister_lp_account", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> transfer_asset
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method TransferAsset(Substrate.NetApi.Model.Types.Primitive.U128 amount, Substrate.NetApiExt.Generated.Model.cf_primitives.chains.assets.any.EnumAsset asset, Substrate.NetApiExt.Generated.Model.sp_core.crypto.AccountId32 destination)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(amount.Encode());
            byteArray.AddRange(asset.Encode());
            byteArray.AddRange(destination.Encode());
            return new Method(31, "LiquidityProvider", 6, "transfer_asset", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> LiquidityProviderConstants
    /// </summary>
    public sealed class LiquidityProviderConstants
    {
    }
    
    /// <summary>
    /// >> LiquidityProviderErrors
    /// </summary>
    public enum LiquidityProviderErrors
    {
        
        /// <summary>
        /// >> InsufficientBalance
        /// The user does not have enough funds.
        /// </summary>
        InsufficientBalance,
        
        /// <summary>
        /// >> BalanceOverflow
        /// The user has reached the maximum balance.
        /// </summary>
        BalanceOverflow,
        
        /// <summary>
        /// >> UnauthorisedToModify
        /// The caller is not authorized to modify the trading position.
        /// </summary>
        UnauthorisedToModify,
        
        /// <summary>
        /// >> InvalidEgressAddress
        /// The Asset cannot be egressed because the destination address is not invalid.
        /// </summary>
        InvalidEgressAddress,
        
        /// <summary>
        /// >> InvalidEncodedAddress
        /// Then given encoded address cannot be decoded into a valid ForeignChainAddress.
        /// </summary>
        InvalidEncodedAddress,
        
        /// <summary>
        /// >> NoLiquidityRefundAddressRegistered
        /// A liquidity refund address must be set by the user for the chain before a
        /// deposit address can be requested.
        /// </summary>
        NoLiquidityRefundAddressRegistered,
        
        /// <summary>
        /// >> LiquidityDepositDisabled
        /// Liquidity deposit is disabled due to Safe Mode.
        /// </summary>
        LiquidityDepositDisabled,
        
        /// <summary>
        /// >> WithdrawalsDisabled
        /// Withdrawals are disabled due to Safe Mode.
        /// </summary>
        WithdrawalsDisabled,
        
        /// <summary>
        /// >> OpenOrdersRemaining
        /// The account still has open orders remaining.
        /// </summary>
        OpenOrdersRemaining,
        
        /// <summary>
        /// >> FundsRemaining
        /// The account still has funds remaining in the free balances.
        /// </summary>
        FundsRemaining,
        
        /// <summary>
        /// >> DestinationAccountNotLiquidityProvider
        /// The destination account is not a liquidity provider.
        /// </summary>
        DestinationAccountNotLiquidityProvider,
        
        /// <summary>
        /// >> CannotTransferToOriginAccount
        /// The account cannot transfer to itself.
        /// </summary>
        CannotTransferToOriginAccount,
    }
}
