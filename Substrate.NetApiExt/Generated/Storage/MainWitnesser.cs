//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> WitnesserStorage
    /// </summary>
    public sealed class WitnesserStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> WitnesserStorage Constructor
        /// </summary>
        public WitnesserStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Witnesser", "Votes"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Witnesser", "ExtraCallData"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>), typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Witnesser", "CallHashExecuted"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                            Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, typeof(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>), typeof(Substrate.NetApi.Model.Types.Base.BaseTuple)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Witnesser", "EpochsToCull"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>)));
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("Witnesser", "WitnessedCallsScheduledForDispatch"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>>)));
        }
        
        /// <summary>
        /// >> VotesParams
        ///  A lookup mapping (epoch, call_hash) to a bitmask representing the votes for each authority.
        /// </summary>
        public static string VotesParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key)
        {
            return RequestGenerator.GetStorage("Witnesser", "Votes", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> VotesDefault
        /// Default value as hex string
        /// </summary>
        public static string VotesDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Votes
        ///  A lookup mapping (epoch, call_hash) to a bitmask representing the votes for each authority.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>> Votes(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key, string blockhash, CancellationToken token)
        {
            string parameters = WitnesserStorage.VotesParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> ExtraCallDataParams
        ///  Stores extra call data for later recomposition.
        /// </summary>
        public static string ExtraCallDataParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key)
        {
            return RequestGenerator.GetStorage("Witnesser", "ExtraCallData", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> ExtraCallDataDefault
        /// Default value as hex string
        /// </summary>
        public static string ExtraCallDataDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> ExtraCallData
        ///  Stores extra call data for later recomposition.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>> ExtraCallData(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key, string blockhash, CancellationToken token)
        {
            string parameters = WitnesserStorage.ExtraCallDataParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U8>>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> CallHashExecutedParams
        ///  A flag indicating that the CallHash has been executed.
        /// </summary>
        public static string CallHashExecutedParams(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key)
        {
            return RequestGenerator.GetStorage("Witnesser", "CallHashExecuted", Substrate.NetApi.Model.Meta.Storage.Type.Map, new Substrate.NetApi.Model.Meta.Storage.Hasher[] {
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Twox64Concat,
                        Substrate.NetApi.Model.Meta.Storage.Hasher.Identity}, key.Value);
        }
        
        /// <summary>
        /// >> CallHashExecutedDefault
        /// Default value as hex string
        /// </summary>
        public static string CallHashExecutedDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> CallHashExecuted
        ///  A flag indicating that the CallHash has been executed.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseTuple> CallHashExecuted(Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash> key, string blockhash, CancellationToken token)
        {
            string parameters = WitnesserStorage.CallHashExecutedParams(key);
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseTuple>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> EpochsToCullParams
        ///  This stores (expired) epochs that needs to have its data culled.
        /// </summary>
        public static string EpochsToCullParams()
        {
            return RequestGenerator.GetStorage("Witnesser", "EpochsToCull", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> EpochsToCullDefault
        /// Default value as hex string
        /// </summary>
        public static string EpochsToCullDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> EpochsToCull
        ///  This stores (expired) epochs that needs to have its data culled.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>> EpochsToCull(string blockhash, CancellationToken token)
        {
            string parameters = WitnesserStorage.EpochsToCullParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Primitive.U32>>(parameters, blockhash, token);
            return result;
        }
        
        /// <summary>
        /// >> WitnessedCallsScheduledForDispatchParams
        ///  This stores Calls that have already been witnessed but not yet dispatched due to safe mode
        ///  being on.
        /// </summary>
        public static string WitnessedCallsScheduledForDispatchParams()
        {
            return RequestGenerator.GetStorage("Witnesser", "WitnessedCallsScheduledForDispatch", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> WitnessedCallsScheduledForDispatchDefault
        /// Default value as hex string
        /// </summary>
        public static string WitnessedCallsScheduledForDispatchDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> WitnessedCallsScheduledForDispatch
        ///  This stores Calls that have already been witnessed but not yet dispatched due to safe mode
        ///  being on.
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>>> WitnessedCallsScheduledForDispatch(string blockhash, CancellationToken token)
        {
            string parameters = WitnesserStorage.WitnessedCallsScheduledForDispatchParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Base.BaseVec<Substrate.NetApi.Model.Types.Base.BaseTuple<Substrate.NetApi.Model.Types.Primitive.U32, Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall, Substrate.NetApiExt.Generated.Model.pallet_cf_witnesser.pallet.CallHash>>>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> WitnesserCalls
    /// </summary>
    public sealed class WitnesserCalls
    {
        
        /// <summary>
        /// >> witness_at_epoch
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method WitnessAtEpoch(Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall call, Substrate.NetApi.Model.Types.Primitive.U32 epoch_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(epoch_index.Encode());
            return new Method(8, "Witnesser", 0, "witness_at_epoch", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> force_witness
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method ForceWitness(Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall call, Substrate.NetApi.Model.Types.Primitive.U32 epoch_index)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            byteArray.AddRange(epoch_index.Encode());
            return new Method(8, "Witnesser", 1, "force_witness", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> prewitness
        /// Contains a variant per dispatchable extrinsic that this pallet has.
        /// </summary>
        public static Method Prewitness(Substrate.NetApiExt.Generated.Model.state_chain_runtime.EnumRuntimeCall call)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(call.Encode());
            return new Method(8, "Witnesser", 2, "prewitness", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> WitnesserConstants
    /// </summary>
    public sealed class WitnesserConstants
    {
    }
    
    /// <summary>
    /// >> WitnesserErrors
    /// </summary>
    public enum WitnesserErrors
    {
        
        /// <summary>
        /// >> AuthorityIndexOutOfBounds
        /// CRITICAL: The authority index is out of bounds. This should never happen.
        /// </summary>
        AuthorityIndexOutOfBounds,
        
        /// <summary>
        /// >> UnauthorisedWitness
        /// Witness is not an authority.
        /// </summary>
        UnauthorisedWitness,
        
        /// <summary>
        /// >> DuplicateWitness
        /// A witness vote was cast twice by the same authority.
        /// </summary>
        DuplicateWitness,
        
        /// <summary>
        /// >> EpochExpired
        /// The epoch has expired
        /// </summary>
        EpochExpired,
        
        /// <summary>
        /// >> InvalidEpoch
        /// Invalid epoch
        /// </summary>
        InvalidEpoch,
    }
}
